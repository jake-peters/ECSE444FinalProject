
ECSE444FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006620  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068bc  080068bc  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  080068bc  080068bc  000168bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068c4  080068c4  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068c8  080068c8  000168c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  080068cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001200  200001b4  08006a80  000201b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013b4  08006a80  000213b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db8a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038be  00000000  00000000  0003dd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001970  00000000  00000000  00041630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  00042fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005f40  00000000  00000000  00044758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bf3  00000000  00000000  0004a698  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001063cc  00000000  00000000  0005f28b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ea8  00000000  00000000  001656d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b4 	.word	0x200001b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006798 	.word	0x08006798

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b8 	.word	0x200001b8
 80001cc:	08006798 	.word	0x08006798

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057a:	2003      	movs	r0, #3
 800057c:	f000 f8ff 	bl	800077e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000580:	2000      	movs	r0, #0
 8000582:	f005 fb8b 	bl	8005c9c <HAL_InitTick>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	e001      	b.n	8000596 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000592:	f005 f9fb 	bl	800598c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000596:	79fb      	ldrb	r3, [r7, #7]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	200011a4 	.word	0x200011a4

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200011a4 	.word	0x200011a4

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d8f7      	bhi.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <__NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	2b00      	cmp	r3, #0
 8000698:	db0b      	blt.n	80006b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 021f 	and.w	r2, r3, #31
 80006a0:	4907      	ldr	r1, [pc, #28]	; (80006c0 <__NVIC_EnableIRQ+0x38>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	095b      	lsrs	r3, r3, #5
 80006a8:	2001      	movs	r0, #1
 80006aa:	fa00 f202 	lsl.w	r2, r0, r2
 80006ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e100 	.word	0xe000e100

080006c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	db0a      	blt.n	80006ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	490c      	ldr	r1, [pc, #48]	; (8000710 <__NVIC_SetPriority+0x4c>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	0112      	lsls	r2, r2, #4
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ec:	e00a      	b.n	8000704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4908      	ldr	r1, [pc, #32]	; (8000714 <__NVIC_SetPriority+0x50>)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	3b04      	subs	r3, #4
 80006fc:	0112      	lsls	r2, r2, #4
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	440b      	add	r3, r1
 8000702:	761a      	strb	r2, [r3, #24]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000e100 	.word	0xe000e100
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	f1c3 0307 	rsb	r3, r3, #7
 8000732:	2b04      	cmp	r3, #4
 8000734:	bf28      	it	cs
 8000736:	2304      	movcs	r3, #4
 8000738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3304      	adds	r3, #4
 800073e:	2b06      	cmp	r3, #6
 8000740:	d902      	bls.n	8000748 <NVIC_EncodePriority+0x30>
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3b03      	subs	r3, #3
 8000746:	e000      	b.n	800074a <NVIC_EncodePriority+0x32>
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	f04f 32ff 	mov.w	r2, #4294967295
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43da      	mvns	r2, r3
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	401a      	ands	r2, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000760:	f04f 31ff 	mov.w	r1, #4294967295
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43d9      	mvns	r1, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	4313      	orrs	r3, r2
         );
}
 8000772:	4618      	mov	r0, r3
 8000774:	3724      	adds	r7, #36	; 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff4c 	bl	8000624 <__NVIC_SetPriorityGrouping>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a6:	f7ff ff61 	bl	800066c <__NVIC_GetPriorityGrouping>
 80007aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	68b9      	ldr	r1, [r7, #8]
 80007b0:	6978      	ldr	r0, [r7, #20]
 80007b2:	f7ff ffb1 	bl	8000718 <NVIC_EncodePriority>
 80007b6:	4602      	mov	r2, r0
 80007b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff80 	bl	80006c4 <__NVIC_SetPriority>
}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff54 	bl	8000688 <__NVIC_EnableIRQ>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e014      	b.n	8000824 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d105      	bne.n	8000810 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f005 f8e2 	bl	80059d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2202      	movs	r2, #2
 8000814:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2201      	movs	r2, #1
 8000820:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800083e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000842:	d120      	bne.n	8000886 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800084e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000852:	d118      	bne.n	8000886 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2204      	movs	r2, #4
 8000858:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	f043 0201 	orr.w	r2, r3, #1
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800086e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800087e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f82d 	bl	80008e0 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000894:	d120      	bne.n	80008d8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800089c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008a4:	d118      	bne.n	80008d8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2204      	movs	r2, #4
 80008aa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	691b      	ldr	r3, [r3, #16]
 80008b0:	f043 0202 	orr.w	r2, r3, #2
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80008d0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 f928 	bl	8000b28 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	795b      	ldrb	r3, [r3, #5]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d101      	bne.n	8000910 <HAL_DAC_ConfigChannel+0x1c>
 800090c:	2302      	movs	r3, #2
 800090e:	e107      	b.n	8000b20 <HAL_DAC_ConfigChannel+0x22c>
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2201      	movs	r2, #1
 8000914:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2202      	movs	r2, #2
 800091a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b04      	cmp	r3, #4
 8000922:	d174      	bne.n	8000a0e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000924:	f7ff fe50 	bl	80005c8 <HAL_GetTick>
 8000928:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d134      	bne.n	800099a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000930:	e011      	b.n	8000956 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000932:	f7ff fe49 	bl	80005c8 <HAL_GetTick>
 8000936:	4602      	mov	r2, r0
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	2b01      	cmp	r3, #1
 800093e:	d90a      	bls.n	8000956 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	f043 0208 	orr.w	r2, r3, #8
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2203      	movs	r2, #3
 8000950:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000952:	2303      	movs	r3, #3
 8000954:	e0e4      	b.n	8000b20 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1e6      	bne.n	8000932 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fe3b 	bl	80005e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	6992      	ldr	r2, [r2, #24]
 8000972:	641a      	str	r2, [r3, #64]	; 0x40
 8000974:	e01e      	b.n	80009b4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000976:	f7ff fe27 	bl	80005c8 <HAL_GetTick>
 800097a:	4602      	mov	r2, r0
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	2b01      	cmp	r3, #1
 8000982:	d90a      	bls.n	800099a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	691b      	ldr	r3, [r3, #16]
 8000988:	f043 0208 	orr.w	r2, r3, #8
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2203      	movs	r2, #3
 8000994:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000996:	2303      	movs	r3, #3
 8000998:	e0c2      	b.n	8000b20 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	dbe8      	blt.n	8000976 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff fe1b 	bl	80005e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	6992      	ldr	r2, [r2, #24]
 80009b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	ea02 0103 	and.w	r1, r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	69da      	ldr	r2, [r3, #28]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	409a      	lsls	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	430a      	orrs	r2, r1
 80009e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	21ff      	movs	r1, #255	; 0xff
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	ea02 0103 	and.w	r1, r2, r3
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	6a1a      	ldr	r2, [r3, #32]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f003 0310 	and.w	r3, r3, #16
 8000a04:	409a      	lsls	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d11d      	bne.n	8000a52 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a1c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f003 0310 	and.w	r3, r3, #16
 8000a24:	221f      	movs	r2, #31
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0310 	and.w	r3, r3, #16
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a58:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f003 0310 	and.w	r3, r3, #16
 8000a60:	2207      	movs	r2, #7
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	431a      	orrs	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0310 	and.w	r3, r3, #16
 8000a86:	697a      	ldr	r2, [r7, #20]
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6819      	ldr	r1, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0310 	and.w	r3, r3, #16
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	6819      	ldr	r1, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	22c0      	movs	r2, #192	; 0xc0
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43da      	mvns	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	400a      	ands	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2201      	movs	r2, #1
 8000b16:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d101      	bne.n	8000b4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e098      	b.n	8000c80 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <HAL_DMA_Init+0x150>)
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d80f      	bhi.n	8000b7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b4b      	ldr	r3, [pc, #300]	; (8000c90 <HAL_DMA_Init+0x154>)
 8000b62:	4413      	add	r3, r2
 8000b64:	4a4b      	ldr	r2, [pc, #300]	; (8000c94 <HAL_DMA_Init+0x158>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	091b      	lsrs	r3, r3, #4
 8000b6c:	009a      	lsls	r2, r3, #2
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a48      	ldr	r2, [pc, #288]	; (8000c98 <HAL_DMA_Init+0x15c>)
 8000b76:	641a      	str	r2, [r3, #64]	; 0x40
 8000b78:	e00e      	b.n	8000b98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b46      	ldr	r3, [pc, #280]	; (8000c9c <HAL_DMA_Init+0x160>)
 8000b82:	4413      	add	r3, r2
 8000b84:	4a43      	ldr	r2, [pc, #268]	; (8000c94 <HAL_DMA_Init+0x158>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	009a      	lsls	r2, r3, #2
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a42      	ldr	r2, [pc, #264]	; (8000ca0 <HAL_DMA_Init+0x164>)
 8000b96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a1b      	ldr	r3, [r3, #32]
 8000bda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bf2:	d039      	beq.n	8000c68 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a27      	ldr	r2, [pc, #156]	; (8000c98 <HAL_DMA_Init+0x15c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d11a      	bne.n	8000c34 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000bfe:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <HAL_DMA_Init+0x168>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f003 031c 	and.w	r3, r3, #28
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	4924      	ldr	r1, [pc, #144]	; (8000ca4 <HAL_DMA_Init+0x168>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <HAL_DMA_Init+0x168>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6859      	ldr	r1, [r3, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c24:	f003 031c 	and.w	r3, r3, #28
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	491d      	ldr	r1, [pc, #116]	; (8000ca4 <HAL_DMA_Init+0x168>)
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	600b      	str	r3, [r1, #0]
 8000c32:	e019      	b.n	8000c68 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_DMA_Init+0x16c>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3c:	f003 031c 	and.w	r3, r3, #28
 8000c40:	210f      	movs	r1, #15
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	4917      	ldr	r1, [pc, #92]	; (8000ca8 <HAL_DMA_Init+0x16c>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_DMA_Init+0x16c>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6859      	ldr	r1, [r3, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f003 031c 	and.w	r3, r3, #28
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	4911      	ldr	r1, [pc, #68]	; (8000ca8 <HAL_DMA_Init+0x16c>)
 8000c64:	4313      	orrs	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40020407 	.word	0x40020407
 8000c90:	bffdfff8 	.word	0xbffdfff8
 8000c94:	cccccccd 	.word	0xcccccccd
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	bffdfbf8 	.word	0xbffdfbf8
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	400200a8 	.word	0x400200a8
 8000ca8:	400204a8 	.word	0x400204a8

08000cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc8:	f003 031c 	and.w	r3, r3, #28
 8000ccc:	2204      	movs	r2, #4
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d026      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x7a>
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d021      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0320 	and.w	r3, r3, #32
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d107      	bne.n	8000d00 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0204 	bic.w	r2, r2, #4
 8000cfe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	f003 021c 	and.w	r2, r3, #28
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d071      	beq.n	8000e00 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000d24:	e06c      	b.n	8000e00 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f003 031c 	and.w	r3, r3, #28
 8000d2e:	2202      	movs	r2, #2
 8000d30:	409a      	lsls	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4013      	ands	r3, r2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d02e      	beq.n	8000d98 <HAL_DMA_IRQHandler+0xec>
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d029      	beq.n	8000d98 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0320 	and.w	r3, r3, #32
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10b      	bne.n	8000d6a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 020a 	bic.w	r2, r2, #10
 8000d60:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f003 021c 	and.w	r2, r3, #28
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	2102      	movs	r1, #2
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d038      	beq.n	8000e00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d96:	e033      	b.n	8000e00 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9c:	f003 031c 	and.w	r3, r3, #28
 8000da0:	2208      	movs	r2, #8
 8000da2:	409a      	lsls	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d02a      	beq.n	8000e02 <HAL_DMA_IRQHandler+0x156>
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d025      	beq.n	8000e02 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 020e 	bic.w	r2, r2, #14
 8000dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f003 021c 	and.w	r2, r3, #28
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
}
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1a:	e17f      	b.n	800111c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2101      	movs	r1, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 8171 	beq.w	8001116 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d00b      	beq.n	8000e54 <HAL_GPIO_Init+0x48>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d007      	beq.n	8000e54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e48:	2b11      	cmp	r3, #17
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b12      	cmp	r3, #18
 8000e52:	d130      	bne.n	8000eb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	f003 0201 	and.w	r2, r3, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d118      	bne.n	8000ef4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	08db      	lsrs	r3, r3, #3
 8000ede:	f003 0201 	and.w	r2, r3, #1
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x128>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b12      	cmp	r3, #18
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	6939      	ldr	r1, [r7, #16]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80ac 	beq.w	8001116 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b5e      	ldr	r3, [pc, #376]	; (8001138 <HAL_GPIO_Init+0x32c>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	4a5d      	ldr	r2, [pc, #372]	; (8001138 <HAL_GPIO_Init+0x32c>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fca:	4b5b      	ldr	r3, [pc, #364]	; (8001138 <HAL_GPIO_Init+0x32c>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd6:	4a59      	ldr	r2, [pc, #356]	; (800113c <HAL_GPIO_Init+0x330>)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001000:	d025      	beq.n	800104e <HAL_GPIO_Init+0x242>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x334>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01f      	beq.n	800104a <HAL_GPIO_Init+0x23e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4d      	ldr	r2, [pc, #308]	; (8001144 <HAL_GPIO_Init+0x338>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0x23a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x33c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x236>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4b      	ldr	r2, [pc, #300]	; (800114c <HAL_GPIO_Init+0x340>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x232>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <HAL_GPIO_Init+0x344>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x22e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a49      	ldr	r2, [pc, #292]	; (8001154 <HAL_GPIO_Init+0x348>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x22a>
 8001032:	2306      	movs	r3, #6
 8001034:	e00c      	b.n	8001050 <HAL_GPIO_Init+0x244>
 8001036:	2307      	movs	r3, #7
 8001038:	e00a      	b.n	8001050 <HAL_GPIO_Init+0x244>
 800103a:	2305      	movs	r3, #5
 800103c:	e008      	b.n	8001050 <HAL_GPIO_Init+0x244>
 800103e:	2304      	movs	r3, #4
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x244>
 8001042:	2303      	movs	r3, #3
 8001044:	e004      	b.n	8001050 <HAL_GPIO_Init+0x244>
 8001046:	2302      	movs	r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x244>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x244>
 800104e:	2300      	movs	r3, #0
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4093      	lsls	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001060:	4936      	ldr	r1, [pc, #216]	; (800113c <HAL_GPIO_Init+0x330>)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800106e:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <HAL_GPIO_Init+0x34c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001092:	4a31      	ldr	r2, [pc, #196]	; (8001158 <HAL_GPIO_Init+0x34c>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_GPIO_Init+0x34c>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010bc:	4a26      	ldr	r2, [pc, #152]	; (8001158 <HAL_GPIO_Init+0x34c>)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <HAL_GPIO_Init+0x34c>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <HAL_GPIO_Init+0x34c>)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x34c>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_GPIO_Init+0x34c>)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa22 f303 	lsr.w	r3, r2, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	f47f ae78 	bne.w	8000e1c <HAL_GPIO_Init+0x10>
  }
}
 800112c:	bf00      	nop
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	48000400 	.word	0x48000400
 8001144:	48000800 	.word	0x48000800
 8001148:	48000c00 	.word	0x48000c00
 800114c:	48001000 	.word	0x48001000
 8001150:	48001400 	.word	0x48001400
 8001154:	48001800 	.word	0x48001800
 8001158:	40010400 	.word	0x40010400

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001178:	e002      	b.n	8001180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f806 	bl	80011bc <HAL_GPIO_EXTI_Callback>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e081      	b.n	80012e8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f004 fc5f 	bl	8005abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2224      	movs	r2, #36	; 0x24
 8001202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0201 	bic.w	r2, r2, #1
 8001214:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001222:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001232:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d107      	bne.n	800124c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	e006      	b.n	800125a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001258:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d104      	bne.n	800126c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800126a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800127a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800128e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	ea42 0103 	orr.w	r1, r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	021a      	lsls	r2, r3, #8
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69d9      	ldr	r1, [r3, #28]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a1a      	ldr	r2, [r3, #32]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2220      	movs	r2, #32
 80012d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b20      	cmp	r3, #32
 8001304:	d138      	bne.n	8001378 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001310:	2302      	movs	r3, #2
 8001312:	e032      	b.n	800137a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2224      	movs	r2, #36	; 0x24
 8001320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0201 	bic.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001342:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6819      	ldr	r1, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2220      	movs	r2, #32
 8001368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	e000      	b.n	800137a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001378:	2302      	movs	r3, #2
  }
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b20      	cmp	r3, #32
 800139a:	d139      	bne.n	8001410 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e033      	b.n	8001412 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2224      	movs	r2, #36	; 0x24
 80013b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0201 	bic.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2220      	movs	r2, #32
 8001400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	e000      	b.n	8001412 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001410:	2302      	movs	r3, #2
  }
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <HAL_PWREx_GetVoltageRange+0x18>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40007000 	.word	0x40007000

0800143c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800144a:	d130      	bne.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001458:	d038      	beq.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001464:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001468:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2232      	movs	r2, #50	; 0x32
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9b      	lsrs	r3, r3, #18
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001480:	e002      	b.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3b01      	subs	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001494:	d102      	bne.n	800149c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f2      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a8:	d110      	bne.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e00f      	b.n	80014ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ba:	d007      	beq.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014c4:	4a05      	ldr	r2, [pc, #20]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40007000 	.word	0x40007000
 80014e0:	2000014c 	.word	0x2000014c
 80014e4:	431bde83 	.word	0x431bde83

080014e8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff f86a 	bl	80005c8 <HAL_GetTick>
 80014f4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e063      	b.n	80015c8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10b      	bne.n	8001524 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f004 fb15 	bl	8005b44 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800151a:	f241 3188 	movw	r1, #5000	; 0x1388
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f858 	bl	80015d4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	3b01      	subs	r3, #1
 8001534:	021a      	lsls	r2, r3, #8
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	2120      	movs	r1, #32
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f850 	bl	80015f0 <QSPI_WaitFlagStateUntilTimeout>
 8001550:	4603      	mov	r3, r0
 8001552:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d131      	bne.n	80015be <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001564:	f023 0310 	bic.w	r3, r3, #16
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6852      	ldr	r2, [r2, #4]
 800156c:	0611      	lsls	r1, r2, #24
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68d2      	ldr	r2, [r2, #12]
 8001572:	4311      	orrs	r1, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	430b      	orrs	r3, r1
 800157a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HAL_QSPI_Init+0xe8>)
 8001584:	4013      	ands	r3, r2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6912      	ldr	r2, [r2, #16]
 800158a:	0411      	lsls	r1, r2, #16
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6952      	ldr	r2, [r2, #20]
 8001590:	4311      	orrs	r1, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6992      	ldr	r2, [r2, #24]
 8001596:	4311      	orrs	r1, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	430b      	orrs	r3, r1
 800159e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80015c6:	7afb      	ldrb	r3, [r7, #11]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	ffe0f8fe 	.word	0xffe0f8fe

080015d4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	4613      	mov	r3, r2
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001600:	e01a      	b.n	8001638 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d016      	beq.n	8001638 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800160a:	f7fe ffdd 	bl	80005c8 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	429a      	cmp	r2, r3
 8001618:	d302      	bcc.n	8001620 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10b      	bne.n	8001638 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2204      	movs	r2, #4
 8001624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e00e      	b.n	8001656 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	bf14      	ite	ne
 8001646:	2301      	movne	r3, #1
 8001648:	2300      	moveq	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	429a      	cmp	r2, r3
 8001652:	d1d6      	bne.n	8001602 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e3d4      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001672:	4ba1      	ldr	r3, [pc, #644]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800167c:	4b9e      	ldr	r3, [pc, #632]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80e4 	beq.w	800185c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <HAL_RCC_OscConfig+0x4a>
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	f040 808b 	bne.w	80017b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	f040 8087 	bne.w	80017b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016aa:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x62>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e3ac      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <HAL_RCC_OscConfig+0x7c>
 80016d2:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016da:	e005      	b.n	80016e8 <HAL_RCC_OscConfig+0x88>
 80016dc:	4b86      	ldr	r3, [pc, #536]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d223      	bcs.n	8001734 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fd71 	bl	80021d8 <RCC_SetFlashLatencyFromMSIRange>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e38d      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001700:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a7c      	ldr	r2, [pc, #496]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4977      	ldr	r1, [pc, #476]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171e:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4972      	ldr	r1, [pc, #456]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
 8001732:	e025      	b.n	8001780 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001734:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a6f      	ldr	r2, [pc, #444]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b6d      	ldr	r3, [pc, #436]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	496a      	ldr	r1, [pc, #424]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001752:	4b69      	ldr	r3, [pc, #420]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	4965      	ldr	r1, [pc, #404]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fd31 	bl	80021d8 <RCC_SetFlashLatencyFromMSIRange>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e34d      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001780:	f000 fc36 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001784:	4601      	mov	r1, r0
 8001786:	4b5c      	ldr	r3, [pc, #368]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	4a5a      	ldr	r2, [pc, #360]	; (80018fc <HAL_RCC_OscConfig+0x29c>)
 8001792:	5cd3      	ldrb	r3, [r2, r3]
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	fa21 f303 	lsr.w	r3, r1, r3
 800179c:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_RCC_OscConfig+0x2a0>)
 800179e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017a0:	4b58      	ldr	r3, [pc, #352]	; (8001904 <HAL_RCC_OscConfig+0x2a4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 fa79 	bl	8005c9c <HAL_InitTick>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d052      	beq.n	800185a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	e331      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d032      	beq.n	8001826 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017c0:	4b4d      	ldr	r3, [pc, #308]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a4c      	ldr	r2, [pc, #304]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017cc:	f7fe fefc 	bl	80005c8 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d4:	f7fe fef8 	bl	80005c8 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e31a      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e6:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a40      	ldr	r2, [pc, #256]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	493b      	ldr	r1, [pc, #236]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	4936      	ldr	r1, [pc, #216]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
 8001824:	e01a      	b.n	800185c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001826:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a33      	ldr	r2, [pc, #204]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001832:	f7fe fec9 	bl	80005c8 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800183a:	f7fe fec5 	bl	80005c8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e2e7      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x1da>
 8001858:	e000      	b.n	800185c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800185a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d074      	beq.n	8001952 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2b08      	cmp	r3, #8
 800186c:	d005      	beq.n	800187a <HAL_RCC_OscConfig+0x21a>
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b0c      	cmp	r3, #12
 8001872:	d10e      	bne.n	8001892 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d10b      	bne.n	8001892 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d064      	beq.n	8001950 <HAL_RCC_OscConfig+0x2f0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d160      	bne.n	8001950 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e2c4      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x24a>
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80018a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e01d      	b.n	80018e6 <HAL_RCC_OscConfig+0x286>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b2:	d10c      	bne.n	80018ce <HAL_RCC_OscConfig+0x26e>
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80018ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e00b      	b.n	80018e6 <HAL_RCC_OscConfig+0x286>
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80018d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <HAL_RCC_OscConfig+0x298>)
 80018e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d01c      	beq.n	8001928 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7fe fe6b 	bl	80005c8 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f4:	e011      	b.n	800191a <HAL_RCC_OscConfig+0x2ba>
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	08006840 	.word	0x08006840
 8001900:	2000014c 	.word	0x2000014c
 8001904:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7fe fe5e 	bl	80005c8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e280      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800191a:	4baf      	ldr	r3, [pc, #700]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x2a8>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7fe fe4e 	bl	80005c8 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7fe fe4a 	bl	80005c8 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e26c      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001942:	4ba5      	ldr	r3, [pc, #660]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x2d0>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d060      	beq.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b04      	cmp	r3, #4
 8001962:	d005      	beq.n	8001970 <HAL_RCC_OscConfig+0x310>
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d119      	bne.n	800199e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d116      	bne.n	800199e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001970:	4b99      	ldr	r3, [pc, #612]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x328>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e249      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b93      	ldr	r3, [pc, #588]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	4990      	ldr	r1, [pc, #576]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199c:	e040      	b.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d023      	beq.n	80019ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a6:	4b8c      	ldr	r3, [pc, #560]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a8b      	ldr	r2, [pc, #556]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7fe fe09 	bl	80005c8 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ba:	f7fe fe05 	bl	80005c8 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e227      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019cc:	4b82      	ldr	r3, [pc, #520]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b7f      	ldr	r3, [pc, #508]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	061b      	lsls	r3, r3, #24
 80019e6:	497c      	ldr	r1, [pc, #496]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
 80019ec:	e018      	b.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b7a      	ldr	r3, [pc, #488]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a79      	ldr	r2, [pc, #484]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 80019f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7fe fde5 	bl	80005c8 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7fe fde1 	bl	80005c8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e203      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a14:	4b70      	ldr	r3, [pc, #448]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d03c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a34:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3a:	4a67      	ldr	r2, [pc, #412]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7fe fdc0 	bl	80005c8 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7fe fdbc 	bl	80005c8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1de      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5e:	4b5e      	ldr	r3, [pc, #376]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ef      	beq.n	8001a4c <HAL_RCC_OscConfig+0x3ec>
 8001a6c:	e01b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6e:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a74:	4a58      	ldr	r2, [pc, #352]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7fe fda3 	bl	80005c8 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a86:	f7fe fd9f 	bl	80005c8 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1c1      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a98:	4b4f      	ldr	r3, [pc, #316]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ef      	bne.n	8001a86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80a6 	beq.w	8001c00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ab8:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10d      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac4:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	4a43      	ldr	r2, [pc, #268]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ace:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad0:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001adc:	2301      	movs	r3, #1
 8001ade:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae0:	4b3e      	ldr	r3, [pc, #248]	; (8001bdc <HAL_RCC_OscConfig+0x57c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d118      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aec:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <HAL_RCC_OscConfig+0x57c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a3a      	ldr	r2, [pc, #232]	; (8001bdc <HAL_RCC_OscConfig+0x57c>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af8:	f7fe fd66 	bl	80005c8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7fe fd62 	bl	80005c8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e184      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b12:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <HAL_RCC_OscConfig+0x57c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4d8>
 8001b26:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2c:	4a2a      	ldr	r2, [pc, #168]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b36:	e024      	b.n	8001b82 <HAL_RCC_OscConfig+0x522>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d110      	bne.n	8001b62 <HAL_RCC_OscConfig+0x502>
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	4a24      	ldr	r2, [pc, #144]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b60:	e00f      	b.n	8001b82 <HAL_RCC_OscConfig+0x522>
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b78:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001b7a:	f023 0304 	bic.w	r3, r3, #4
 8001b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d016      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7fe fd1d 	bl	80005c8 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f7fe fd19 	bl	80005c8 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e139      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_OscConfig+0x578>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0ed      	beq.n	8001b92 <HAL_RCC_OscConfig+0x532>
 8001bb6:	e01a      	b.n	8001bee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7fe fd06 	bl	80005c8 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bbe:	e00f      	b.n	8001be0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7fe fd02 	bl	80005c8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d906      	bls.n	8001be0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e122      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be0:	4b90      	ldr	r3, [pc, #576]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1e8      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bee:	7ffb      	ldrb	r3, [r7, #31]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf4:	4b8b      	ldr	r3, [pc, #556]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	4a8a      	ldr	r2, [pc, #552]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8108 	beq.w	8001e1a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	f040 80d0 	bne.w	8001db4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c14:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d130      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	3b01      	subs	r3, #1
 8001c34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d127      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d11f      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c54:	2a07      	cmp	r2, #7
 8001c56:	bf14      	ite	ne
 8001c58:	2201      	movne	r2, #1
 8001c5a:	2200      	moveq	r2, #0
 8001c5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d113      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d109      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	085b      	lsrs	r3, r3, #1
 8001c82:	3b01      	subs	r3, #1
 8001c84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d06e      	beq.n	8001d68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d069      	beq.n	8001d64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c90:	4b64      	ldr	r3, [pc, #400]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c9c:	4b61      	ldr	r3, [pc, #388]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0b7      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cac:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a5c      	ldr	r2, [pc, #368]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cb8:	f7fe fc86 	bl	80005c8 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7fe fc82 	bl	80005c8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0a4      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd2:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cde:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	4b51      	ldr	r3, [pc, #324]	; (8001e28 <HAL_RCC_OscConfig+0x7c8>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cf8:	0212      	lsls	r2, r2, #8
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d00:	0852      	lsrs	r2, r2, #1
 8001d02:	3a01      	subs	r2, #1
 8001d04:	0552      	lsls	r2, r2, #21
 8001d06:	4311      	orrs	r1, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d0c:	0852      	lsrs	r2, r2, #1
 8001d0e:	3a01      	subs	r2, #1
 8001d10:	0652      	lsls	r2, r2, #25
 8001d12:	4311      	orrs	r1, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d18:	0912      	lsrs	r2, r2, #4
 8001d1a:	0452      	lsls	r2, r2, #17
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	4941      	ldr	r1, [pc, #260]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d24:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a3e      	ldr	r2, [pc, #248]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d30:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d3c:	f7fe fc44 	bl	80005c8 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7fe fc40 	bl	80005c8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e062      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d56:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d62:	e05a      	b.n	8001e1a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e059      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d152      	bne.n	8001e1a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2a      	ldr	r2, [pc, #168]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d8c:	f7fe fc1c 	bl	80005c8 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d94:	f7fe fc18 	bl	80005c8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e03a      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da6:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x734>
 8001db2:	e032      	b.n	8001e1a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d02d      	beq.n	8001e16 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001dd8:	f023 0303 	bic.w	r3, r3, #3
 8001ddc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001de4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dee:	f7fe fbeb 	bl	80005c8 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df6:	f7fe fbe7 	bl	80005c8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e009      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCC_OscConfig+0x7c4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f0      	bne.n	8001df6 <HAL_RCC_OscConfig+0x796>
 8001e14:	e001      	b.n	8001e1a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	f99d808c 	.word	0xf99d808c

08001e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0c8      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_ClockConfig+0x1b0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d910      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCC_ClockConfig+0x1b0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0207 	bic.w	r2, r3, #7
 8001e56:	4961      	ldr	r1, [pc, #388]	; (8001fdc <HAL_RCC_ClockConfig+0x1b0>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b5f      	ldr	r3, [pc, #380]	; (8001fdc <HAL_RCC_ClockConfig+0x1b0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b0      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d04c      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e84:	4b56      	ldr	r3, [pc, #344]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d121      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e09e      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d115      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e092      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e086      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec4:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e07e      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ed4:	4b42      	ldr	r3, [pc, #264]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 0203 	bic.w	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	493f      	ldr	r1, [pc, #252]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee6:	f7fe fb6f 	bl	80005c8 <HAL_GetTick>
 8001eea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eee:	f7fe fb6b 	bl	80005c8 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e066      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f04:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 020c 	and.w	r2, r3, #12
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d1eb      	bne.n	8001eee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	492c      	ldr	r1, [pc, #176]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_ClockConfig+0x1b0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d210      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_RCC_ClockConfig+0x1b0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	4924      	ldr	r1, [pc, #144]	; (8001fdc <HAL_RCC_ClockConfig+0x1b0>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_RCC_ClockConfig+0x1b0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e036      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4918      	ldr	r1, [pc, #96]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4910      	ldr	r1, [pc, #64]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa2:	f000 f825 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4601      	mov	r1, r0
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	fa21 f303 	lsr.w	r3, r1, r3
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fe68 	bl	8005c9c <HAL_InitTick>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08006840 	.word	0x08006840
 8001fe8:	2000014c 	.word	0x2000014c
 8001fec:	20000000 	.word	0x20000000

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x104>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x34>
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d121      	bne.n	8002062 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d11e      	bne.n	8002062 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d107      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e005      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002040:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800204c:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10d      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d102      	bne.n	800206e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	e004      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b08      	cmp	r3, #8
 8002072:	d101      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_RCC_GetSysClockFreq+0x110>)
 8002076:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d133      	bne.n	80020e6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d002      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0xa4>
 800208e:	2b03      	cmp	r3, #3
 8002090:	d003      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0xaa>
 8002092:	e005      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002096:	617b      	str	r3, [r7, #20]
      break;
 8002098:	e005      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_GetSysClockFreq+0x110>)
 800209c:	617b      	str	r3, [r7, #20]
      break;
 800209e:	e002      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	617b      	str	r3, [r7, #20]
      break;
 80020a4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	3301      	adds	r3, #1
 80020b2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	fb02 f203 	mul.w	r2, r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0e5b      	lsrs	r3, r3, #25
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	3301      	adds	r3, #1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020e6:	69bb      	ldr	r3, [r7, #24]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3724      	adds	r7, #36	; 0x24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08006858 	.word	0x08006858
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	007a1200 	.word	0x007a1200

08002104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_RCC_GetHCLKFreq+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	2000014c 	.word	0x2000014c

0800211c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002120:	f7ff fff0 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002124:	4601      	mov	r1, r0
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002132:	5cd3      	ldrb	r3, [r2, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa21 f303 	lsr.w	r3, r1, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08006850 	.word	0x08006850

08002148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800214c:	f7ff ffda 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002150:	4601      	mov	r1, r0
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0adb      	lsrs	r3, r3, #11
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x28>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	08006850 	.word	0x08006850

08002174 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	220f      	movs	r2, #15
 8002182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	08db      	lsrs	r3, r3, #3
 80021ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <HAL_RCC_GetClockConfig+0x60>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0207 	and.w	r2, r3, #7
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	601a      	str	r2, [r3, #0]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40022000 	.word	0x40022000

080021d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021e4:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021f0:	f7ff f916 	bl	8001420 <HAL_PWREx_GetVoltageRange>
 80021f4:	6178      	str	r0, [r7, #20]
 80021f6:	e014      	b.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002202:	6593      	str	r3, [r2, #88]	; 0x58
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002210:	f7ff f906 	bl	8001420 <HAL_PWREx_GetVoltageRange>
 8002214:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002216:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002228:	d10b      	bne.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b80      	cmp	r3, #128	; 0x80
 800222e:	d919      	bls.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2ba0      	cmp	r3, #160	; 0xa0
 8002234:	d902      	bls.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002236:	2302      	movs	r3, #2
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	e013      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800223c:	2301      	movs	r3, #1
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	e010      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b80      	cmp	r3, #128	; 0x80
 8002246:	d902      	bls.n	800224e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002248:	2303      	movs	r3, #3
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	e00a      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d102      	bne.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002254:	2302      	movs	r3, #2
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e004      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b70      	cmp	r3, #112	; 0x70
 800225e:	d101      	bne.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002260:	2301      	movs	r3, #1
 8002262:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 0207 	bic.w	r2, r3, #7
 800226c:	4909      	ldr	r1, [pc, #36]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	429a      	cmp	r2, r3
 8002280:	d001      	beq.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	40022000 	.word	0x40022000

08002298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022a0:	2300      	movs	r3, #0
 80022a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022a4:	2300      	movs	r3, #0
 80022a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d03f      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022bc:	d01c      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80022be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c2:	d802      	bhi.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80022c8:	e01f      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80022ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022ce:	d003      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80022d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022d4:	d01c      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80022d6:	e018      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022d8:	4b85      	ldr	r3, [pc, #532]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a84      	ldr	r2, [pc, #528]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e4:	e015      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fab9 	bl	8002864 <RCCEx_PLLSAI1_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f6:	e00c      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3320      	adds	r3, #32
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fba0 	bl	8002a44 <RCCEx_PLLSAI2_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002308:	e003      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	74fb      	strb	r3, [r7, #19]
      break;
 800230e:	e000      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002318:	4b75      	ldr	r3, [pc, #468]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002326:	4972      	ldr	r1, [pc, #456]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800232e:	e001      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d03f      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002348:	d01c      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800234a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234e:	d802      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00e      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002354:	e01f      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800235a:	d003      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800235c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002360:	d01c      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002362:	e018      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002364:	4b62      	ldr	r3, [pc, #392]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a61      	ldr	r2, [pc, #388]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800236a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002370:	e015      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fa73 	bl	8002864 <RCCEx_PLLSAI1_Config>
 800237e:	4603      	mov	r3, r0
 8002380:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002382:	e00c      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3320      	adds	r3, #32
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fb5a 	bl	8002a44 <RCCEx_PLLSAI2_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002394:	e003      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	74fb      	strb	r3, [r7, #19]
      break;
 800239a:	e000      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800239c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10b      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023a4:	4b52      	ldr	r3, [pc, #328]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023b2:	494f      	ldr	r1, [pc, #316]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ba:	e001      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80a0 	beq.w	800250e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00d      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	4a40      	ldr	r2, [pc, #256]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	6593      	str	r3, [r2, #88]	; 0x58
 80023f4:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002400:	2301      	movs	r3, #1
 8002402:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002404:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a3a      	ldr	r2, [pc, #232]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002410:	f7fe f8da 	bl	80005c8 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002416:	e009      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002418:	f7fe f8d6 	bl	80005c8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d902      	bls.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	74fb      	strb	r3, [r7, #19]
        break;
 800242a:	e005      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800242c:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ef      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d15c      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800243e:	4b2c      	ldr	r3, [pc, #176]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002448:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01f      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	429a      	cmp	r2, r3
 800245a:	d019      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002466:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002468:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002488:	4a19      	ldr	r2, [pc, #100]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe f895 	bl	80005c8 <HAL_GetTick>
 800249e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a0:	e00b      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe f891 	bl	80005c8 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d902      	bls.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	74fb      	strb	r3, [r7, #19]
            break;
 80024b8:	e006      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ec      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024de:	4904      	ldr	r1, [pc, #16]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024e6:	e009      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	74bb      	strb	r3, [r7, #18]
 80024ec:	e006      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024fc:	7c7b      	ldrb	r3, [r7, #17]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b9e      	ldr	r3, [pc, #632]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	4a9d      	ldr	r2, [pc, #628]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800251a:	4b98      	ldr	r3, [pc, #608]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f023 0203 	bic.w	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	4994      	ldr	r1, [pc, #592]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800253c:	4b8f      	ldr	r3, [pc, #572]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f023 020c 	bic.w	r2, r3, #12
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	498c      	ldr	r1, [pc, #560]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800255e:	4b87      	ldr	r3, [pc, #540]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4983      	ldr	r1, [pc, #524]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002580:	4b7e      	ldr	r3, [pc, #504]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	497b      	ldr	r1, [pc, #492]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b0:	4972      	ldr	r1, [pc, #456]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025c4:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	496a      	ldr	r1, [pc, #424]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025e6:	4b65      	ldr	r3, [pc, #404]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	4961      	ldr	r1, [pc, #388]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002608:	4b5c      	ldr	r3, [pc, #368]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	4959      	ldr	r1, [pc, #356]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800262a:	4b54      	ldr	r3, [pc, #336]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002638:	4950      	ldr	r1, [pc, #320]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800264c:	4b4b      	ldr	r3, [pc, #300]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	4948      	ldr	r1, [pc, #288]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800266e:	4b43      	ldr	r3, [pc, #268]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	493f      	ldr	r1, [pc, #252]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d028      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002690:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269e:	4937      	ldr	r1, [pc, #220]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ae:	d106      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b0:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a31      	ldr	r2, [pc, #196]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ba:	60d3      	str	r3, [r2, #12]
 80026bc:	e011      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3304      	adds	r3, #4
 80026cc:	2101      	movs	r1, #1
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f8c8 	bl	8002864 <RCCEx_PLLSAI1_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d028      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026ee:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	491f      	ldr	r1, [pc, #124]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270c:	d106      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4a1a      	ldr	r2, [pc, #104]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002718:	60d3      	str	r3, [r2, #12]
 800271a:	e011      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002724:	d10c      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3304      	adds	r3, #4
 800272a:	2101      	movs	r1, #1
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f899 	bl	8002864 <RCCEx_PLLSAI1_Config>
 8002732:	4603      	mov	r3, r0
 8002734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02b      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275a:	4908      	ldr	r1, [pc, #32]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800276a:	d109      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a02      	ldr	r2, [pc, #8]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002776:	60d3      	str	r3, [r2, #12]
 8002778:	e014      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002788:	d10c      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f867 	bl	8002864 <RCCEx_PLLSAI1_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d02f      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027b0:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027be:	4928      	ldr	r1, [pc, #160]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ce:	d10d      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	2102      	movs	r1, #2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f844 	bl	8002864 <RCCEx_PLLSAI1_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d014      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	74bb      	strb	r3, [r7, #18]
 80027ea:	e011      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027f4:	d10c      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3320      	adds	r3, #32
 80027fa:	2102      	movs	r1, #2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f921 	bl	8002a44 <RCCEx_PLLSAI2_Config>
 8002802:	4603      	mov	r3, r0
 8002804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800282a:	490d      	ldr	r1, [pc, #52]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800284e:	4904      	ldr	r1, [pc, #16]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002856:	7cbb      	ldrb	r3, [r7, #18]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000

08002864 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002872:	4b73      	ldr	r3, [pc, #460]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d018      	beq.n	80028b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800287e:	4b70      	ldr	r3, [pc, #448]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0203 	and.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d10d      	bne.n	80028aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
       ||
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002896:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
       ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d044      	beq.n	8002934 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	e041      	b.n	8002934 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d00c      	beq.n	80028d2 <RCCEx_PLLSAI1_Config+0x6e>
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d013      	beq.n	80028e4 <RCCEx_PLLSAI1_Config+0x80>
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d120      	bne.n	8002902 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028c0:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d11d      	bne.n	8002908 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d0:	e01a      	b.n	8002908 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028d2:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d116      	bne.n	800290c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e2:	e013      	b.n	800290c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028e4:	4b56      	ldr	r3, [pc, #344]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10f      	bne.n	8002910 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028f0:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002900:	e006      	b.n	8002910 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      break;
 8002906:	e004      	b.n	8002912 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002908:	bf00      	nop
 800290a:	e002      	b.n	8002912 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800290c:	bf00      	nop
 800290e:	e000      	b.n	8002912 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002910:	bf00      	nop
    }

    if(status == HAL_OK)
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002918:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	3b01      	subs	r3, #1
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	430b      	orrs	r3, r1
 800292e:	4944      	ldr	r1, [pc, #272]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d17d      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a40      	ldr	r2, [pc, #256]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002940:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002946:	f7fd fe3f 	bl	80005c8 <HAL_GetTick>
 800294a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800294c:	e009      	b.n	8002962 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800294e:	f7fd fe3b 	bl	80005c8 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d902      	bls.n	8002962 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	73fb      	strb	r3, [r7, #15]
        break;
 8002960:	e005      	b.n	800296e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002962:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1ef      	bne.n	800294e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d160      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d111      	bne.n	800299e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6892      	ldr	r2, [r2, #8]
 800298a:	0211      	lsls	r1, r2, #8
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68d2      	ldr	r2, [r2, #12]
 8002990:	0912      	lsrs	r2, r2, #4
 8002992:	0452      	lsls	r2, r2, #17
 8002994:	430a      	orrs	r2, r1
 8002996:	492a      	ldr	r1, [pc, #168]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	610b      	str	r3, [r1, #16]
 800299c:	e027      	b.n	80029ee <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d112      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a4:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6892      	ldr	r2, [r2, #8]
 80029b4:	0211      	lsls	r1, r2, #8
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6912      	ldr	r2, [r2, #16]
 80029ba:	0852      	lsrs	r2, r2, #1
 80029bc:	3a01      	subs	r2, #1
 80029be:	0552      	lsls	r2, r2, #21
 80029c0:	430a      	orrs	r2, r1
 80029c2:	491f      	ldr	r1, [pc, #124]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	610b      	str	r3, [r1, #16]
 80029c8:	e011      	b.n	80029ee <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6892      	ldr	r2, [r2, #8]
 80029da:	0211      	lsls	r1, r2, #8
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6952      	ldr	r2, [r2, #20]
 80029e0:	0852      	lsrs	r2, r2, #1
 80029e2:	3a01      	subs	r2, #1
 80029e4:	0652      	lsls	r2, r2, #25
 80029e6:	430a      	orrs	r2, r1
 80029e8:	4915      	ldr	r1, [pc, #84]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fd fde5 	bl	80005c8 <HAL_GetTick>
 80029fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a00:	e009      	b.n	8002a16 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a02:	f7fd fde1 	bl	80005c8 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d902      	bls.n	8002a16 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	73fb      	strb	r3, [r7, #15]
          break;
 8002a14:	e005      	b.n	8002a22 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0ef      	beq.n	8002a02 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	4903      	ldr	r1, [pc, #12]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000

08002a44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a52:	4b68      	ldr	r3, [pc, #416]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d018      	beq.n	8002a90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a5e:	4b65      	ldr	r3, [pc, #404]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0203 	and.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d10d      	bne.n	8002a8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
       ||
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a76:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
       ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d044      	beq.n	8002b14 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
 8002a8e:	e041      	b.n	8002b14 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d00c      	beq.n	8002ab2 <RCCEx_PLLSAI2_Config+0x6e>
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d013      	beq.n	8002ac4 <RCCEx_PLLSAI2_Config+0x80>
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d120      	bne.n	8002ae2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aa0:	4b54      	ldr	r3, [pc, #336]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d11d      	bne.n	8002ae8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab0:	e01a      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ab2:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d116      	bne.n	8002aec <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac2:	e013      	b.n	8002aec <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10f      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ad0:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ae0:	e006      	b.n	8002af0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae6:	e004      	b.n	8002af2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ae8:	bf00      	nop
 8002aea:	e002      	b.n	8002af2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002aec:	bf00      	nop
 8002aee:	e000      	b.n	8002af2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002af0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10d      	bne.n	8002b14 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002af8:	4b3e      	ldr	r3, [pc, #248]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	4939      	ldr	r1, [pc, #228]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d167      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a35      	ldr	r2, [pc, #212]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b26:	f7fd fd4f 	bl	80005c8 <HAL_GetTick>
 8002b2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b2c:	e009      	b.n	8002b42 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b2e:	f7fd fd4b 	bl	80005c8 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d902      	bls.n	8002b42 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	73fb      	strb	r3, [r7, #15]
        break;
 8002b40:	e005      	b.n	8002b4e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1ef      	bne.n	8002b2e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d14a      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d111      	bne.n	8002b7e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6892      	ldr	r2, [r2, #8]
 8002b6a:	0211      	lsls	r1, r2, #8
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68d2      	ldr	r2, [r2, #12]
 8002b70:	0912      	lsrs	r2, r2, #4
 8002b72:	0452      	lsls	r2, r2, #17
 8002b74:	430a      	orrs	r2, r1
 8002b76:	491f      	ldr	r1, [pc, #124]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	614b      	str	r3, [r1, #20]
 8002b7c:	e011      	b.n	8002ba2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6892      	ldr	r2, [r2, #8]
 8002b8e:	0211      	lsls	r1, r2, #8
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6912      	ldr	r2, [r2, #16]
 8002b94:	0852      	lsrs	r2, r2, #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0652      	lsls	r2, r2, #25
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	4915      	ldr	r1, [pc, #84]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7fd fd0b 	bl	80005c8 <HAL_GetTick>
 8002bb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bb4:	e009      	b.n	8002bca <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bb6:	f7fd fd07 	bl	80005c8 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d902      	bls.n	8002bca <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	73fb      	strb	r3, [r7, #15]
          break;
 8002bc8:	e005      	b.n	8002bd6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ef      	beq.n	8002bb6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e049      	b.n	8002c9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f002 ffd4 	bl	8005bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f000 faa6 	bl	8003188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d001      	beq.n	8002cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e04f      	b.n	8002d60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <HAL_TIM_Base_Start_IT+0xc4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01d      	beq.n	8002d1e <HAL_TIM_Base_Start_IT+0x76>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cea:	d018      	beq.n	8002d1e <HAL_TIM_Base_Start_IT+0x76>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a1f      	ldr	r2, [pc, #124]	; (8002d70 <HAL_TIM_Base_Start_IT+0xc8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_TIM_Base_Start_IT+0x76>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00e      	beq.n	8002d1e <HAL_TIM_Base_Start_IT+0x76>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d009      	beq.n	8002d1e <HAL_TIM_Base_Start_IT+0x76>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <HAL_TIM_Base_Start_IT+0xd4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <HAL_TIM_Base_Start_IT+0x76>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d115      	bne.n	8002d4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b06      	cmp	r3, #6
 8002d2e:	d015      	beq.n	8002d5c <HAL_TIM_Base_Start_IT+0xb4>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d36:	d011      	beq.n	8002d5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	e008      	b.n	8002d5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e000      	b.n	8002d5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800
 8002d78:	40000c00 	.word	0x40000c00
 8002d7c:	40013400 	.word	0x40013400
 8002d80:	40014000 	.word	0x40014000
 8002d84:	00010007 	.word	0x00010007

08002d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d122      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d11b      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0202 	mvn.w	r2, #2
 8002db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f9be 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9b0 	bl	8003138 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f9c1 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d122      	bne.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d11b      	bne.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0204 	mvn.w	r2, #4
 8002e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f994 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f986 	bl	8003138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f997 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d122      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d11b      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0208 	mvn.w	r2, #8
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f96a 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002e78:	e005      	b.n	8002e86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f95c 	bl	8003138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f96d 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d122      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0210 	mvn.w	r2, #16
 8002eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f940 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f932 	bl	8003138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f943 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d10e      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d107      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0201 	mvn.w	r2, #1
 8002f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f002 fd22 	bl	8005950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b80      	cmp	r3, #128	; 0x80
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 faee 	bl	8003514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f46:	d10e      	bne.n	8002f66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d107      	bne.n	8002f66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fae1 	bl	8003528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d10e      	bne.n	8002f92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d107      	bne.n	8002f92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f8f1 	bl	8003174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d10e      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d107      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f06f 0220 	mvn.w	r2, #32
 8002fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 faa1 	bl	8003500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_TIM_ConfigClockSource+0x18>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0a8      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x16a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003000:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003008:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d067      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x124>
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d80b      	bhi.n	8003036 <HAL_TIM_ConfigClockSource+0x70>
 800301e:	2b10      	cmp	r3, #16
 8003020:	d073      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x144>
 8003022:	2b10      	cmp	r3, #16
 8003024:	d802      	bhi.n	800302c <HAL_TIM_ConfigClockSource+0x66>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d06f      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800302a:	e078      	b.n	800311e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800302c:	2b20      	cmp	r3, #32
 800302e:	d06c      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x144>
 8003030:	2b30      	cmp	r3, #48	; 0x30
 8003032:	d06a      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003034:	e073      	b.n	800311e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003036:	2b70      	cmp	r3, #112	; 0x70
 8003038:	d00d      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x90>
 800303a:	2b70      	cmp	r3, #112	; 0x70
 800303c:	d804      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x82>
 800303e:	2b50      	cmp	r3, #80	; 0x50
 8003040:	d033      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0xe4>
 8003042:	2b60      	cmp	r3, #96	; 0x60
 8003044:	d041      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003046:	e06a      	b.n	800311e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304c:	d066      	beq.n	800311c <HAL_TIM_ConfigClockSource+0x156>
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003052:	d017      	beq.n	8003084 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003054:	e063      	b.n	800311e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f000 f9a3 	bl	80033b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003078:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	609a      	str	r2, [r3, #8]
      break;
 8003082:	e04c      	b.n	800311e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	6899      	ldr	r1, [r3, #8]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f000 f98c 	bl	80033b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a6:	609a      	str	r2, [r3, #8]
      break;
 80030a8:	e039      	b.n	800311e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f000 f900 	bl	80032bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2150      	movs	r1, #80	; 0x50
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f959 	bl	800337a <TIM_ITRx_SetConfig>
      break;
 80030c8:	e029      	b.n	800311e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 f91f 	bl	800331a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2160      	movs	r1, #96	; 0x60
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f949 	bl	800337a <TIM_ITRx_SetConfig>
      break;
 80030e8:	e019      	b.n	800311e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 f8e0 	bl	80032bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2140      	movs	r1, #64	; 0x40
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f939 	bl	800337a <TIM_ITRx_SetConfig>
      break;
 8003108:	e009      	b.n	800311e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	4610      	mov	r0, r2
 8003116:	f000 f930 	bl	800337a <TIM_ITRx_SetConfig>
        break;
 800311a:	e000      	b.n	800311e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800311c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a40      	ldr	r2, [pc, #256]	; (800329c <TIM_Base_SetConfig+0x114>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d013      	beq.n	80031c8 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a6:	d00f      	beq.n	80031c8 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3d      	ldr	r2, [pc, #244]	; (80032a0 <TIM_Base_SetConfig+0x118>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00b      	beq.n	80031c8 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a3c      	ldr	r2, [pc, #240]	; (80032a4 <TIM_Base_SetConfig+0x11c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d007      	beq.n	80031c8 <TIM_Base_SetConfig+0x40>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a3b      	ldr	r2, [pc, #236]	; (80032a8 <TIM_Base_SetConfig+0x120>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_Base_SetConfig+0x40>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a3a      	ldr	r2, [pc, #232]	; (80032ac <TIM_Base_SetConfig+0x124>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d108      	bne.n	80031da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2f      	ldr	r2, [pc, #188]	; (800329c <TIM_Base_SetConfig+0x114>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e8:	d01b      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2c      	ldr	r2, [pc, #176]	; (80032a0 <TIM_Base_SetConfig+0x118>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d017      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2b      	ldr	r2, [pc, #172]	; (80032a4 <TIM_Base_SetConfig+0x11c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <TIM_Base_SetConfig+0x120>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00f      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a29      	ldr	r2, [pc, #164]	; (80032ac <TIM_Base_SetConfig+0x124>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00b      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a28      	ldr	r2, [pc, #160]	; (80032b0 <TIM_Base_SetConfig+0x128>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <TIM_Base_SetConfig+0x12c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <TIM_Base_SetConfig+0x130>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a10      	ldr	r2, [pc, #64]	; (800329c <TIM_Base_SetConfig+0x114>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00f      	beq.n	8003280 <TIM_Base_SetConfig+0xf8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a12      	ldr	r2, [pc, #72]	; (80032ac <TIM_Base_SetConfig+0x124>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0xf8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <TIM_Base_SetConfig+0x128>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0xf8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <TIM_Base_SetConfig+0x12c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0xf8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <TIM_Base_SetConfig+0x130>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d103      	bne.n	8003288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	615a      	str	r2, [r3, #20]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40000400 	.word	0x40000400
 80032a4:	40000800 	.word	0x40000800
 80032a8:	40000c00 	.word	0x40000c00
 80032ac:	40013400 	.word	0x40013400
 80032b0:	40014000 	.word	0x40014000
 80032b4:	40014400 	.word	0x40014400
 80032b8:	40014800 	.word	0x40014800

080032bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f023 0201 	bic.w	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f023 030a 	bic.w	r3, r3, #10
 80032f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	621a      	str	r2, [r3, #32]
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800331a:	b480      	push	{r7}
 800331c:	b087      	sub	sp, #28
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f023 0210 	bic.w	r2, r3, #16
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003344:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	031b      	lsls	r3, r3, #12
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003356:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	621a      	str	r2, [r3, #32]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800337a:	b480      	push	{r7}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	f043 0307 	orr.w	r3, r3, #7
 800339c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	609a      	str	r2, [r3, #8]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	021a      	lsls	r2, r3, #8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	609a      	str	r2, [r3, #8]
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003404:	2302      	movs	r3, #2
 8003406:	e068      	b.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2e      	ldr	r2, [pc, #184]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2d      	ldr	r2, [pc, #180]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d108      	bne.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003442:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003454:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01d      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347a:	d018      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00e      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d009      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a13      	ldr	r2, [pc, #76]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a14      	ldr	r2, [pc, #80]	; (80034fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10c      	bne.n	80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40013400 	.word	0x40013400
 80034f0:	40000400 	.word	0x40000400
 80034f4:	40000800 	.word	0x40000800
 80034f8:	40000c00 	.word	0x40000c00
 80034fc:	40014000 	.word	0x40014000

08003500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e040      	b.n	80035d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f002 fb58 	bl	8005c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2224      	movs	r2, #36	; 0x24
 8003568:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8c0 	bl	8003700 <UART_SetConfig>
 8003580:	4603      	mov	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e022      	b.n	80035d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fb3e 	bl	8003c14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fbc5 	bl	8003d58 <UART_CheckIdleState>
 80035ce:	4603      	mov	r3, r0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	f040 8081 	bne.w	80036f4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_UART_Transmit+0x26>
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e079      	b.n	80036f6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_UART_Transmit+0x38>
 800360c:	2302      	movs	r3, #2
 800360e:	e072      	b.n	80036f6 <HAL_UART_Transmit+0x11e>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2221      	movs	r2, #33	; 0x21
 8003622:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003624:	f7fc ffd0 	bl	80005c8 <HAL_GetTick>
 8003628:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	88fa      	ldrh	r2, [r7, #6]
 800362e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	88fa      	ldrh	r2, [r7, #6]
 8003636:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003642:	d108      	bne.n	8003656 <HAL_UART_Transmit+0x7e>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e003      	b.n	800365e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003666:	e02d      	b.n	80036c4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2200      	movs	r2, #0
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fbb5 	bl	8003de2 <UART_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e039      	b.n	80036f6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003694:	b292      	uxth	r2, r2
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	3302      	adds	r3, #2
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	e008      	b.n	80036b2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b292      	uxth	r2, r2
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1cb      	bne.n	8003668 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2140      	movs	r1, #64	; 0x40
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fb81 	bl	8003de2 <UART_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e005      	b.n	80036f6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003700:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003704:	b088      	sub	sp, #32
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4313      	orrs	r3, r2
 8003724:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4bac      	ldr	r3, [pc, #688]	; (80039e0 <UART_SetConfig+0x2e0>)
 800372e:	4013      	ands	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	69f9      	ldr	r1, [r7, #28]
 8003736:	430b      	orrs	r3, r1
 8003738:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4aa2      	ldr	r2, [pc, #648]	; (80039e4 <UART_SetConfig+0x2e4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	4313      	orrs	r3, r2
 8003768:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a99      	ldr	r2, [pc, #612]	; (80039e8 <UART_SetConfig+0x2e8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d121      	bne.n	80037cc <UART_SetConfig+0xcc>
 8003788:	4b98      	ldr	r3, [pc, #608]	; (80039ec <UART_SetConfig+0x2ec>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b03      	cmp	r3, #3
 8003794:	d816      	bhi.n	80037c4 <UART_SetConfig+0xc4>
 8003796:	a201      	add	r2, pc, #4	; (adr r2, 800379c <UART_SetConfig+0x9c>)
 8003798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379c:	080037ad 	.word	0x080037ad
 80037a0:	080037b9 	.word	0x080037b9
 80037a4:	080037b3 	.word	0x080037b3
 80037a8:	080037bf 	.word	0x080037bf
 80037ac:	2301      	movs	r3, #1
 80037ae:	76fb      	strb	r3, [r7, #27]
 80037b0:	e0e8      	b.n	8003984 <UART_SetConfig+0x284>
 80037b2:	2302      	movs	r3, #2
 80037b4:	76fb      	strb	r3, [r7, #27]
 80037b6:	e0e5      	b.n	8003984 <UART_SetConfig+0x284>
 80037b8:	2304      	movs	r3, #4
 80037ba:	76fb      	strb	r3, [r7, #27]
 80037bc:	e0e2      	b.n	8003984 <UART_SetConfig+0x284>
 80037be:	2308      	movs	r3, #8
 80037c0:	76fb      	strb	r3, [r7, #27]
 80037c2:	e0df      	b.n	8003984 <UART_SetConfig+0x284>
 80037c4:	2310      	movs	r3, #16
 80037c6:	76fb      	strb	r3, [r7, #27]
 80037c8:	bf00      	nop
 80037ca:	e0db      	b.n	8003984 <UART_SetConfig+0x284>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a87      	ldr	r2, [pc, #540]	; (80039f0 <UART_SetConfig+0x2f0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d134      	bne.n	8003840 <UART_SetConfig+0x140>
 80037d6:	4b85      	ldr	r3, [pc, #532]	; (80039ec <UART_SetConfig+0x2ec>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	d829      	bhi.n	8003838 <UART_SetConfig+0x138>
 80037e4:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <UART_SetConfig+0xec>)
 80037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ea:	bf00      	nop
 80037ec:	08003821 	.word	0x08003821
 80037f0:	08003839 	.word	0x08003839
 80037f4:	08003839 	.word	0x08003839
 80037f8:	08003839 	.word	0x08003839
 80037fc:	0800382d 	.word	0x0800382d
 8003800:	08003839 	.word	0x08003839
 8003804:	08003839 	.word	0x08003839
 8003808:	08003839 	.word	0x08003839
 800380c:	08003827 	.word	0x08003827
 8003810:	08003839 	.word	0x08003839
 8003814:	08003839 	.word	0x08003839
 8003818:	08003839 	.word	0x08003839
 800381c:	08003833 	.word	0x08003833
 8003820:	2300      	movs	r3, #0
 8003822:	76fb      	strb	r3, [r7, #27]
 8003824:	e0ae      	b.n	8003984 <UART_SetConfig+0x284>
 8003826:	2302      	movs	r3, #2
 8003828:	76fb      	strb	r3, [r7, #27]
 800382a:	e0ab      	b.n	8003984 <UART_SetConfig+0x284>
 800382c:	2304      	movs	r3, #4
 800382e:	76fb      	strb	r3, [r7, #27]
 8003830:	e0a8      	b.n	8003984 <UART_SetConfig+0x284>
 8003832:	2308      	movs	r3, #8
 8003834:	76fb      	strb	r3, [r7, #27]
 8003836:	e0a5      	b.n	8003984 <UART_SetConfig+0x284>
 8003838:	2310      	movs	r3, #16
 800383a:	76fb      	strb	r3, [r7, #27]
 800383c:	bf00      	nop
 800383e:	e0a1      	b.n	8003984 <UART_SetConfig+0x284>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a6b      	ldr	r2, [pc, #428]	; (80039f4 <UART_SetConfig+0x2f4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d120      	bne.n	800388c <UART_SetConfig+0x18c>
 800384a:	4b68      	ldr	r3, [pc, #416]	; (80039ec <UART_SetConfig+0x2ec>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003850:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003854:	2b10      	cmp	r3, #16
 8003856:	d00f      	beq.n	8003878 <UART_SetConfig+0x178>
 8003858:	2b10      	cmp	r3, #16
 800385a:	d802      	bhi.n	8003862 <UART_SetConfig+0x162>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <UART_SetConfig+0x16c>
 8003860:	e010      	b.n	8003884 <UART_SetConfig+0x184>
 8003862:	2b20      	cmp	r3, #32
 8003864:	d005      	beq.n	8003872 <UART_SetConfig+0x172>
 8003866:	2b30      	cmp	r3, #48	; 0x30
 8003868:	d009      	beq.n	800387e <UART_SetConfig+0x17e>
 800386a:	e00b      	b.n	8003884 <UART_SetConfig+0x184>
 800386c:	2300      	movs	r3, #0
 800386e:	76fb      	strb	r3, [r7, #27]
 8003870:	e088      	b.n	8003984 <UART_SetConfig+0x284>
 8003872:	2302      	movs	r3, #2
 8003874:	76fb      	strb	r3, [r7, #27]
 8003876:	e085      	b.n	8003984 <UART_SetConfig+0x284>
 8003878:	2304      	movs	r3, #4
 800387a:	76fb      	strb	r3, [r7, #27]
 800387c:	e082      	b.n	8003984 <UART_SetConfig+0x284>
 800387e:	2308      	movs	r3, #8
 8003880:	76fb      	strb	r3, [r7, #27]
 8003882:	e07f      	b.n	8003984 <UART_SetConfig+0x284>
 8003884:	2310      	movs	r3, #16
 8003886:	76fb      	strb	r3, [r7, #27]
 8003888:	bf00      	nop
 800388a:	e07b      	b.n	8003984 <UART_SetConfig+0x284>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a59      	ldr	r2, [pc, #356]	; (80039f8 <UART_SetConfig+0x2f8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d120      	bne.n	80038d8 <UART_SetConfig+0x1d8>
 8003896:	4b55      	ldr	r3, [pc, #340]	; (80039ec <UART_SetConfig+0x2ec>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d00f      	beq.n	80038c4 <UART_SetConfig+0x1c4>
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d802      	bhi.n	80038ae <UART_SetConfig+0x1ae>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <UART_SetConfig+0x1b8>
 80038ac:	e010      	b.n	80038d0 <UART_SetConfig+0x1d0>
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d005      	beq.n	80038be <UART_SetConfig+0x1be>
 80038b2:	2bc0      	cmp	r3, #192	; 0xc0
 80038b4:	d009      	beq.n	80038ca <UART_SetConfig+0x1ca>
 80038b6:	e00b      	b.n	80038d0 <UART_SetConfig+0x1d0>
 80038b8:	2300      	movs	r3, #0
 80038ba:	76fb      	strb	r3, [r7, #27]
 80038bc:	e062      	b.n	8003984 <UART_SetConfig+0x284>
 80038be:	2302      	movs	r3, #2
 80038c0:	76fb      	strb	r3, [r7, #27]
 80038c2:	e05f      	b.n	8003984 <UART_SetConfig+0x284>
 80038c4:	2304      	movs	r3, #4
 80038c6:	76fb      	strb	r3, [r7, #27]
 80038c8:	e05c      	b.n	8003984 <UART_SetConfig+0x284>
 80038ca:	2308      	movs	r3, #8
 80038cc:	76fb      	strb	r3, [r7, #27]
 80038ce:	e059      	b.n	8003984 <UART_SetConfig+0x284>
 80038d0:	2310      	movs	r3, #16
 80038d2:	76fb      	strb	r3, [r7, #27]
 80038d4:	bf00      	nop
 80038d6:	e055      	b.n	8003984 <UART_SetConfig+0x284>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a47      	ldr	r2, [pc, #284]	; (80039fc <UART_SetConfig+0x2fc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d124      	bne.n	800392c <UART_SetConfig+0x22c>
 80038e2:	4b42      	ldr	r3, [pc, #264]	; (80039ec <UART_SetConfig+0x2ec>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f0:	d012      	beq.n	8003918 <UART_SetConfig+0x218>
 80038f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f6:	d802      	bhi.n	80038fe <UART_SetConfig+0x1fe>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <UART_SetConfig+0x20c>
 80038fc:	e012      	b.n	8003924 <UART_SetConfig+0x224>
 80038fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003902:	d006      	beq.n	8003912 <UART_SetConfig+0x212>
 8003904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003908:	d009      	beq.n	800391e <UART_SetConfig+0x21e>
 800390a:	e00b      	b.n	8003924 <UART_SetConfig+0x224>
 800390c:	2300      	movs	r3, #0
 800390e:	76fb      	strb	r3, [r7, #27]
 8003910:	e038      	b.n	8003984 <UART_SetConfig+0x284>
 8003912:	2302      	movs	r3, #2
 8003914:	76fb      	strb	r3, [r7, #27]
 8003916:	e035      	b.n	8003984 <UART_SetConfig+0x284>
 8003918:	2304      	movs	r3, #4
 800391a:	76fb      	strb	r3, [r7, #27]
 800391c:	e032      	b.n	8003984 <UART_SetConfig+0x284>
 800391e:	2308      	movs	r3, #8
 8003920:	76fb      	strb	r3, [r7, #27]
 8003922:	e02f      	b.n	8003984 <UART_SetConfig+0x284>
 8003924:	2310      	movs	r3, #16
 8003926:	76fb      	strb	r3, [r7, #27]
 8003928:	bf00      	nop
 800392a:	e02b      	b.n	8003984 <UART_SetConfig+0x284>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <UART_SetConfig+0x2e4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d124      	bne.n	8003980 <UART_SetConfig+0x280>
 8003936:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <UART_SetConfig+0x2ec>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003944:	d012      	beq.n	800396c <UART_SetConfig+0x26c>
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394a:	d802      	bhi.n	8003952 <UART_SetConfig+0x252>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <UART_SetConfig+0x260>
 8003950:	e012      	b.n	8003978 <UART_SetConfig+0x278>
 8003952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003956:	d006      	beq.n	8003966 <UART_SetConfig+0x266>
 8003958:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800395c:	d009      	beq.n	8003972 <UART_SetConfig+0x272>
 800395e:	e00b      	b.n	8003978 <UART_SetConfig+0x278>
 8003960:	2300      	movs	r3, #0
 8003962:	76fb      	strb	r3, [r7, #27]
 8003964:	e00e      	b.n	8003984 <UART_SetConfig+0x284>
 8003966:	2302      	movs	r3, #2
 8003968:	76fb      	strb	r3, [r7, #27]
 800396a:	e00b      	b.n	8003984 <UART_SetConfig+0x284>
 800396c:	2304      	movs	r3, #4
 800396e:	76fb      	strb	r3, [r7, #27]
 8003970:	e008      	b.n	8003984 <UART_SetConfig+0x284>
 8003972:	2308      	movs	r3, #8
 8003974:	76fb      	strb	r3, [r7, #27]
 8003976:	e005      	b.n	8003984 <UART_SetConfig+0x284>
 8003978:	2310      	movs	r3, #16
 800397a:	76fb      	strb	r3, [r7, #27]
 800397c:	bf00      	nop
 800397e:	e001      	b.n	8003984 <UART_SetConfig+0x284>
 8003980:	2310      	movs	r3, #16
 8003982:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a16      	ldr	r2, [pc, #88]	; (80039e4 <UART_SetConfig+0x2e4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	f040 8087 	bne.w	8003a9e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003990:	7efb      	ldrb	r3, [r7, #27]
 8003992:	2b08      	cmp	r3, #8
 8003994:	d836      	bhi.n	8003a04 <UART_SetConfig+0x304>
 8003996:	a201      	add	r2, pc, #4	; (adr r2, 800399c <UART_SetConfig+0x29c>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039c1 	.word	0x080039c1
 80039a0:	08003a05 	.word	0x08003a05
 80039a4:	080039c9 	.word	0x080039c9
 80039a8:	08003a05 	.word	0x08003a05
 80039ac:	080039cf 	.word	0x080039cf
 80039b0:	08003a05 	.word	0x08003a05
 80039b4:	08003a05 	.word	0x08003a05
 80039b8:	08003a05 	.word	0x08003a05
 80039bc:	080039d7 	.word	0x080039d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c0:	f7fe fbac 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 80039c4:	6178      	str	r0, [r7, #20]
        break;
 80039c6:	e022      	b.n	8003a0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <UART_SetConfig+0x300>)
 80039ca:	617b      	str	r3, [r7, #20]
        break;
 80039cc:	e01f      	b.n	8003a0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ce:	f7fe fb0f 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 80039d2:	6178      	str	r0, [r7, #20]
        break;
 80039d4:	e01b      	b.n	8003a0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039da:	617b      	str	r3, [r7, #20]
        break;
 80039dc:	e017      	b.n	8003a0e <UART_SetConfig+0x30e>
 80039de:	bf00      	nop
 80039e0:	efff69f3 	.word	0xefff69f3
 80039e4:	40008000 	.word	0x40008000
 80039e8:	40013800 	.word	0x40013800
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40004400 	.word	0x40004400
 80039f4:	40004800 	.word	0x40004800
 80039f8:	40004c00 	.word	0x40004c00
 80039fc:	40005000 	.word	0x40005000
 8003a00:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	76bb      	strb	r3, [r7, #26]
        break;
 8003a0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80f1 	beq.w	8003bf8 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4413      	add	r3, r2
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d305      	bcc.n	8003a32 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d902      	bls.n	8003a38 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	76bb      	strb	r3, [r7, #26]
 8003a36:	e0df      	b.n	8003bf8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	0214      	lsls	r4, r2, #8
 8003a4a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003a4e:	020b      	lsls	r3, r1, #8
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6852      	ldr	r2, [r2, #4]
 8003a54:	0852      	lsrs	r2, r2, #1
 8003a56:	4611      	mov	r1, r2
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	eb13 0b01 	adds.w	fp, r3, r1
 8003a60:	eb44 0c02 	adc.w	ip, r4, r2
 8003a64:	4658      	mov	r0, fp
 8003a66:	4661      	mov	r1, ip
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f04f 0400 	mov.w	r4, #0
 8003a70:	461a      	mov	r2, r3
 8003a72:	4623      	mov	r3, r4
 8003a74:	f7fc fbfc 	bl	8000270 <__aeabi_uldivmod>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a84:	d308      	bcc.n	8003a98 <UART_SetConfig+0x398>
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a8c:	d204      	bcs.n	8003a98 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	e0af      	b.n	8003bf8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	76bb      	strb	r3, [r7, #26]
 8003a9c:	e0ac      	b.n	8003bf8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa6:	d15b      	bne.n	8003b60 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003aa8:	7efb      	ldrb	r3, [r7, #27]
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d827      	bhi.n	8003afe <UART_SetConfig+0x3fe>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <UART_SetConfig+0x3b4>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ad9 	.word	0x08003ad9
 8003ab8:	08003ae1 	.word	0x08003ae1
 8003abc:	08003ae9 	.word	0x08003ae9
 8003ac0:	08003aff 	.word	0x08003aff
 8003ac4:	08003aef 	.word	0x08003aef
 8003ac8:	08003aff 	.word	0x08003aff
 8003acc:	08003aff 	.word	0x08003aff
 8003ad0:	08003aff 	.word	0x08003aff
 8003ad4:	08003af7 	.word	0x08003af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad8:	f7fe fb20 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8003adc:	6178      	str	r0, [r7, #20]
        break;
 8003ade:	e013      	b.n	8003b08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae0:	f7fe fb32 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 8003ae4:	6178      	str	r0, [r7, #20]
        break;
 8003ae6:	e00f      	b.n	8003b08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae8:	4b49      	ldr	r3, [pc, #292]	; (8003c10 <UART_SetConfig+0x510>)
 8003aea:	617b      	str	r3, [r7, #20]
        break;
 8003aec:	e00c      	b.n	8003b08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aee:	f7fe fa7f 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8003af2:	6178      	str	r0, [r7, #20]
        break;
 8003af4:	e008      	b.n	8003b08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003afa:	617b      	str	r3, [r7, #20]
        break;
 8003afc:	e004      	b.n	8003b08 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	76bb      	strb	r3, [r7, #26]
        break;
 8003b06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d074      	beq.n	8003bf8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	005a      	lsls	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	441a      	add	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b0f      	cmp	r3, #15
 8003b2a:	d916      	bls.n	8003b5a <UART_SetConfig+0x45a>
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b32:	d212      	bcs.n	8003b5a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f023 030f 	bic.w	r3, r3, #15
 8003b3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	89fb      	ldrh	r3, [r7, #14]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	89fa      	ldrh	r2, [r7, #14]
 8003b56:	60da      	str	r2, [r3, #12]
 8003b58:	e04e      	b.n	8003bf8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	76bb      	strb	r3, [r7, #26]
 8003b5e:	e04b      	b.n	8003bf8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b60:	7efb      	ldrb	r3, [r7, #27]
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d827      	bhi.n	8003bb6 <UART_SetConfig+0x4b6>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <UART_SetConfig+0x46c>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003b91 	.word	0x08003b91
 8003b70:	08003b99 	.word	0x08003b99
 8003b74:	08003ba1 	.word	0x08003ba1
 8003b78:	08003bb7 	.word	0x08003bb7
 8003b7c:	08003ba7 	.word	0x08003ba7
 8003b80:	08003bb7 	.word	0x08003bb7
 8003b84:	08003bb7 	.word	0x08003bb7
 8003b88:	08003bb7 	.word	0x08003bb7
 8003b8c:	08003baf 	.word	0x08003baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b90:	f7fe fac4 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8003b94:	6178      	str	r0, [r7, #20]
        break;
 8003b96:	e013      	b.n	8003bc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b98:	f7fe fad6 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 8003b9c:	6178      	str	r0, [r7, #20]
        break;
 8003b9e:	e00f      	b.n	8003bc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <UART_SetConfig+0x510>)
 8003ba2:	617b      	str	r3, [r7, #20]
        break;
 8003ba4:	e00c      	b.n	8003bc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba6:	f7fe fa23 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8003baa:	6178      	str	r0, [r7, #20]
        break;
 8003bac:	e008      	b.n	8003bc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb2:	617b      	str	r3, [r7, #20]
        break;
 8003bb4:	e004      	b.n	8003bc0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	76bb      	strb	r3, [r7, #26]
        break;
 8003bbe:	bf00      	nop
    }

    if (pclk != 0U)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d018      	beq.n	8003bf8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	085a      	lsrs	r2, r3, #1
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	441a      	add	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b0f      	cmp	r3, #15
 8003be0:	d908      	bls.n	8003bf4 <UART_SetConfig+0x4f4>
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d204      	bcs.n	8003bf4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	e001      	b.n	8003bf8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003c04:	7ebb      	ldrb	r3, [r7, #26]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003c10:	00f42400 	.word	0x00f42400

08003c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01a      	beq.n	8003d2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d12:	d10a      	bne.n	8003d2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d66:	f7fc fc2f 	bl	80005c8 <HAL_GetTick>
 8003d6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d10e      	bne.n	8003d98 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f82a 	bl	8003de2 <UART_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e020      	b.n	8003dda <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d10e      	bne.n	8003dc4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003da6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f814 	bl	8003de2 <UART_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e00a      	b.n	8003dda <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	4613      	mov	r3, r2
 8003df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df2:	e05d      	b.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d059      	beq.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfc:	f7fc fbe4 	bl	80005c8 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d302      	bcc.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d11b      	bne.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e20:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e042      	b.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d02b      	beq.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e66:	d123      	bne.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e80:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e00f      	b.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d092      	beq.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eea:	2b84      	cmp	r3, #132	; 0x84
 8003eec:	d005      	beq.n	8003efa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003eee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3303      	adds	r3, #3
 8003ef8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f0c:	f000 fada 	bl	80044c4 <vTaskStartScheduler>
  
  return osOK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f18:	b089      	sub	sp, #36	; 0x24
 8003f1a:	af04      	add	r7, sp, #16
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <osThreadCreate+0x54>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01c      	beq.n	8003f6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685c      	ldr	r4, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681d      	ldr	r5, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691e      	ldr	r6, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ffc8 	bl	8003ed8 <makeFreeRtosPriority>
 8003f48:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f52:	9202      	str	r2, [sp, #8]
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	9100      	str	r1, [sp, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4632      	mov	r2, r6
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f000 f8ed 	bl	800413e <xTaskCreateStatic>
 8003f64:	4603      	mov	r3, r0
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e01c      	b.n	8003fa4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685c      	ldr	r4, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f76:	b29e      	uxth	r6, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ffaa 	bl	8003ed8 <makeFreeRtosPriority>
 8003f84:	4602      	mov	r2, r0
 8003f86:	f107 030c 	add.w	r3, r7, #12
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	9200      	str	r2, [sp, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4632      	mov	r2, r6
 8003f92:	4629      	mov	r1, r5
 8003f94:	4620      	mov	r0, r4
 8003f96:	f000 f92c 	bl	80041f2 <xTaskCreate>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d001      	beq.n	8003fa4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <osDelay+0x16>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	e000      	b.n	8003fc6 <osDelay+0x18>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fa48 	bl	800445c <vTaskDelay>
  
  return osOK;
 8003fcc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f103 0208 	add.w	r2, r3, #8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f04f 32ff 	mov.w	r2, #4294967295
 8003fee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f103 0208 	add.w	r2, r3, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f103 0208 	add.w	r2, r3, #8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	601a      	str	r2, [r3, #0]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d103      	bne.n	8004098 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e00c      	b.n	80040b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3308      	adds	r3, #8
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e002      	b.n	80040a6 <vListInsert+0x2e>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d2f6      	bcs.n	80040a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	601a      	str	r2, [r3, #0]
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6892      	ldr	r2, [r2, #8]
 8004100:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6852      	ldr	r2, [r2, #4]
 800410a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	d103      	bne.n	800411e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	1e5a      	subs	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800413e:	b580      	push	{r7, lr}
 8004140:	b08e      	sub	sp, #56	; 0x38
 8004142:	af04      	add	r7, sp, #16
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800414c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	e7fe      	b.n	8004164 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <xTaskCreateStatic+0x42>
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e7fe      	b.n	800417e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004180:	2354      	movs	r3, #84	; 0x54
 8004182:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b54      	cmp	r3, #84	; 0x54
 8004188:	d009      	beq.n	800419e <xTaskCreateStatic+0x60>
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	e7fe      	b.n	800419c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800419e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01e      	beq.n	80041e4 <xTaskCreateStatic+0xa6>
 80041a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01b      	beq.n	80041e4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041be:	2300      	movs	r3, #0
 80041c0:	9303      	str	r3, [sp, #12]
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	9302      	str	r3, [sp, #8]
 80041c6:	f107 0314 	add.w	r3, r7, #20
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f850 	bl	800427c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041de:	f000 f8d3 	bl	8004388 <prvAddNewTaskToReadyList>
 80041e2:	e001      	b.n	80041e8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041e8:	697b      	ldr	r3, [r7, #20]
	}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3728      	adds	r7, #40	; 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b08c      	sub	sp, #48	; 0x30
 80041f6:	af04      	add	r7, sp, #16
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4618      	mov	r0, r3
 8004208:	f000 feb4 	bl	8004f74 <pvPortMalloc>
 800420c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00e      	beq.n	8004232 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004214:	2054      	movs	r0, #84	; 0x54
 8004216:	f000 fead 	bl	8004f74 <pvPortMalloc>
 800421a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
 8004228:	e005      	b.n	8004236 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f000 ff64 	bl	80050f8 <vPortFree>
 8004230:	e001      	b.n	8004236 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d017      	beq.n	800426c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004244:	88fa      	ldrh	r2, [r7, #6]
 8004246:	2300      	movs	r3, #0
 8004248:	9303      	str	r3, [sp, #12]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	9302      	str	r3, [sp, #8]
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f80e 	bl	800427c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004260:	69f8      	ldr	r0, [r7, #28]
 8004262:	f000 f891 	bl	8004388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004266:	2301      	movs	r3, #1
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e002      	b.n	8004272 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800426c:	f04f 33ff 	mov.w	r3, #4294967295
 8004270:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004272:	69bb      	ldr	r3, [r7, #24]
	}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004294:	3b01      	subs	r3, #1
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f023 0307 	bic.w	r3, r3, #7
 80042a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <prvInitialiseNewTask+0x46>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	e7fe      	b.n	80042c0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01f      	beq.n	8004308 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	e012      	b.n	80042f4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	7819      	ldrb	r1, [r3, #0]
 80042d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	3334      	adds	r3, #52	; 0x34
 80042de:	460a      	mov	r2, r1
 80042e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d006      	beq.n	80042fc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3301      	adds	r3, #1
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	d9e9      	bls.n	80042ce <prvInitialiseNewTask+0x52>
 80042fa:	e000      	b.n	80042fe <prvInitialiseNewTask+0x82>
			{
				break;
 80042fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004306:	e003      	b.n	8004310 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	2b06      	cmp	r3, #6
 8004314:	d901      	bls.n	800431a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004316:	2306      	movs	r3, #6
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	2200      	movs	r2, #0
 800432a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	3304      	adds	r3, #4
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fe70 	bl	8004016 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	3318      	adds	r3, #24
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fe6b 	bl	8004016 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004344:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	f1c3 0207 	rsb	r2, r3, #7
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004354:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	2200      	movs	r2, #0
 800435a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	69b8      	ldr	r0, [r7, #24]
 800436a:	f000 fbfd 	bl	8004b68 <pxPortInitialiseStack>
 800436e:	4602      	mov	r2, r0
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004380:	bf00      	nop
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004390:	f000 fd14 	bl	8004dbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004394:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <prvAddNewTaskToReadyList+0xb8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	4a29      	ldr	r2, [pc, #164]	; (8004440 <prvAddNewTaskToReadyList+0xb8>)
 800439c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800439e:	4b29      	ldr	r3, [pc, #164]	; (8004444 <prvAddNewTaskToReadyList+0xbc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043a6:	4a27      	ldr	r2, [pc, #156]	; (8004444 <prvAddNewTaskToReadyList+0xbc>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043ac:	4b24      	ldr	r3, [pc, #144]	; (8004440 <prvAddNewTaskToReadyList+0xb8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d110      	bne.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043b4:	f000 fab8 	bl	8004928 <prvInitialiseTaskLists>
 80043b8:	e00d      	b.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043ba:	4b23      	ldr	r3, [pc, #140]	; (8004448 <prvAddNewTaskToReadyList+0xc0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <prvAddNewTaskToReadyList+0xbc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d802      	bhi.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043d0:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <prvAddNewTaskToReadyList+0xbc>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043d6:	4b1d      	ldr	r3, [pc, #116]	; (800444c <prvAddNewTaskToReadyList+0xc4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3301      	adds	r3, #1
 80043dc:	4a1b      	ldr	r2, [pc, #108]	; (800444c <prvAddNewTaskToReadyList+0xc4>)
 80043de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	2201      	movs	r2, #1
 80043e6:	409a      	lsls	r2, r3
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <prvAddNewTaskToReadyList+0xc8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	4a18      	ldr	r2, [pc, #96]	; (8004450 <prvAddNewTaskToReadyList+0xc8>)
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <prvAddNewTaskToReadyList+0xcc>)
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f7ff fe11 	bl	8004030 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800440e:	f000 fd03 	bl	8004e18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <prvAddNewTaskToReadyList+0xc0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00e      	beq.n	8004438 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <prvAddNewTaskToReadyList+0xbc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	429a      	cmp	r2, r3
 8004426:	d207      	bcs.n	8004438 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <prvAddNewTaskToReadyList+0xd0>)
 800442a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	200002d0 	.word	0x200002d0
 8004444:	200001d0 	.word	0x200001d0
 8004448:	200002dc 	.word	0x200002dc
 800444c:	200002ec 	.word	0x200002ec
 8004450:	200002d8 	.word	0x200002d8
 8004454:	200001d4 	.word	0x200001d4
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <vTaskDelay+0x60>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <vTaskDelay+0x2e>
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	e7fe      	b.n	8004488 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800448a:	f000 f879 	bl	8004580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800448e:	2100      	movs	r1, #0
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fb03 	bl	8004a9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004496:	f000 f881 	bl	800459c <xTaskResumeAll>
 800449a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d107      	bne.n	80044b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80044a2:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <vTaskDelay+0x64>)
 80044a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200002f8 	.word	0x200002f8
 80044c0:	e000ed04 	.word	0xe000ed04

080044c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044d2:	463a      	mov	r2, r7
 80044d4:	1d39      	adds	r1, r7, #4
 80044d6:	f107 0308 	add.w	r3, r7, #8
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 ff20 	bl	8005320 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	9202      	str	r2, [sp, #8]
 80044e8:	9301      	str	r3, [sp, #4]
 80044ea:	2300      	movs	r3, #0
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	2300      	movs	r3, #0
 80044f0:	460a      	mov	r2, r1
 80044f2:	491d      	ldr	r1, [pc, #116]	; (8004568 <vTaskStartScheduler+0xa4>)
 80044f4:	481d      	ldr	r0, [pc, #116]	; (800456c <vTaskStartScheduler+0xa8>)
 80044f6:	f7ff fe22 	bl	800413e <xTaskCreateStatic>
 80044fa:	4602      	mov	r2, r0
 80044fc:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <vTaskStartScheduler+0xac>)
 80044fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <vTaskStartScheduler+0xac>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004508:	2301      	movs	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	e001      	b.n	8004512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d115      	bne.n	8004544 <vTaskStartScheduler+0x80>
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <vTaskStartScheduler+0xb0>)
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004532:	4b11      	ldr	r3, [pc, #68]	; (8004578 <vTaskStartScheduler+0xb4>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004538:	4b10      	ldr	r3, [pc, #64]	; (800457c <vTaskStartScheduler+0xb8>)
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800453e:	f000 fb9f 	bl	8004c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004542:	e00d      	b.n	8004560 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d109      	bne.n	8004560 <vTaskStartScheduler+0x9c>
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e7fe      	b.n	800455e <vTaskStartScheduler+0x9a>
}
 8004560:	bf00      	nop
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	080067b0 	.word	0x080067b0
 800456c:	080048f9 	.word	0x080048f9
 8004570:	200002f4 	.word	0x200002f4
 8004574:	200002f0 	.word	0x200002f0
 8004578:	200002dc 	.word	0x200002dc
 800457c:	200002d4 	.word	0x200002d4

08004580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004584:	4b04      	ldr	r3, [pc, #16]	; (8004598 <vTaskSuspendAll+0x18>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	4a03      	ldr	r2, [pc, #12]	; (8004598 <vTaskSuspendAll+0x18>)
 800458c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800458e:	bf00      	nop
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	200002f8 	.word	0x200002f8

0800459c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045aa:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <xTaskResumeAll+0x114>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <xTaskResumeAll+0x2a>
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	e7fe      	b.n	80045c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045c6:	f000 fbf9 	bl	8004dbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045ca:	4b39      	ldr	r3, [pc, #228]	; (80046b0 <xTaskResumeAll+0x114>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	4a37      	ldr	r2, [pc, #220]	; (80046b0 <xTaskResumeAll+0x114>)
 80045d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045d4:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <xTaskResumeAll+0x114>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d161      	bne.n	80046a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045dc:	4b35      	ldr	r3, [pc, #212]	; (80046b4 <xTaskResumeAll+0x118>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d05d      	beq.n	80046a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045e4:	e02e      	b.n	8004644 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e6:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <xTaskResumeAll+0x11c>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3318      	adds	r3, #24
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fd79 	bl	80040ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fd74 	bl	80040ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	2201      	movs	r2, #1
 8004608:	409a      	lsls	r2, r3
 800460a:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <xTaskResumeAll+0x120>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4313      	orrs	r3, r2
 8004610:	4a2a      	ldr	r2, [pc, #168]	; (80046bc <xTaskResumeAll+0x120>)
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4a27      	ldr	r2, [pc, #156]	; (80046c0 <xTaskResumeAll+0x124>)
 8004622:	441a      	add	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f7ff fd00 	bl	8004030 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004634:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <xTaskResumeAll+0x128>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800463e:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <xTaskResumeAll+0x12c>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004644:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <xTaskResumeAll+0x11c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1cc      	bne.n	80045e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004652:	f000 fa03 	bl	8004a5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004656:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <xTaskResumeAll+0x130>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004662:	f000 f837 	bl	80046d4 <xTaskIncrementTick>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800466c:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <xTaskResumeAll+0x12c>)
 800466e:	2201      	movs	r2, #1
 8004670:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3b01      	subs	r3, #1
 8004676:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f1      	bne.n	8004662 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800467e:	4b13      	ldr	r3, [pc, #76]	; (80046cc <xTaskResumeAll+0x130>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004684:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <xTaskResumeAll+0x12c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800468c:	2301      	movs	r3, #1
 800468e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004690:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <xTaskResumeAll+0x134>)
 8004692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046a0:	f000 fbba 	bl	8004e18 <vPortExitCritical>

	return xAlreadyYielded;
 80046a4:	68bb      	ldr	r3, [r7, #8]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200002f8 	.word	0x200002f8
 80046b4:	200002d0 	.word	0x200002d0
 80046b8:	20000290 	.word	0x20000290
 80046bc:	200002d8 	.word	0x200002d8
 80046c0:	200001d4 	.word	0x200001d4
 80046c4:	200001d0 	.word	0x200001d0
 80046c8:	200002e4 	.word	0x200002e4
 80046cc:	200002e0 	.word	0x200002e0
 80046d0:	e000ed04 	.word	0xe000ed04

080046d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046de:	4b4e      	ldr	r3, [pc, #312]	; (8004818 <xTaskIncrementTick+0x144>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 8087 	bne.w	80047f6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046e8:	4b4c      	ldr	r3, [pc, #304]	; (800481c <xTaskIncrementTick+0x148>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3301      	adds	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046f0:	4a4a      	ldr	r2, [pc, #296]	; (800481c <xTaskIncrementTick+0x148>)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11f      	bne.n	800473c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80046fc:	4b48      	ldr	r3, [pc, #288]	; (8004820 <xTaskIncrementTick+0x14c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <xTaskIncrementTick+0x46>
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	e7fe      	b.n	8004718 <xTaskIncrementTick+0x44>
 800471a:	4b41      	ldr	r3, [pc, #260]	; (8004820 <xTaskIncrementTick+0x14c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	4b40      	ldr	r3, [pc, #256]	; (8004824 <xTaskIncrementTick+0x150>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a3e      	ldr	r2, [pc, #248]	; (8004820 <xTaskIncrementTick+0x14c>)
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4a3e      	ldr	r2, [pc, #248]	; (8004824 <xTaskIncrementTick+0x150>)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <xTaskIncrementTick+0x154>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	4a3c      	ldr	r2, [pc, #240]	; (8004828 <xTaskIncrementTick+0x154>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	f000 f990 	bl	8004a5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800473c:	4b3b      	ldr	r3, [pc, #236]	; (800482c <xTaskIncrementTick+0x158>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	429a      	cmp	r2, r3
 8004744:	d348      	bcc.n	80047d8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004746:	4b36      	ldr	r3, [pc, #216]	; (8004820 <xTaskIncrementTick+0x14c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004750:	4b36      	ldr	r3, [pc, #216]	; (800482c <xTaskIncrementTick+0x158>)
 8004752:	f04f 32ff 	mov.w	r2, #4294967295
 8004756:	601a      	str	r2, [r3, #0]
					break;
 8004758:	e03e      	b.n	80047d8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800475a:	4b31      	ldr	r3, [pc, #196]	; (8004820 <xTaskIncrementTick+0x14c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	429a      	cmp	r2, r3
 8004770:	d203      	bcs.n	800477a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004772:	4a2e      	ldr	r2, [pc, #184]	; (800482c <xTaskIncrementTick+0x158>)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004778:	e02e      	b.n	80047d8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3304      	adds	r3, #4
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff fcb3 	bl	80040ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	3318      	adds	r3, #24
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fcaa 	bl	80040ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	2201      	movs	r2, #1
 800479c:	409a      	lsls	r2, r3
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <xTaskIncrementTick+0x15c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	4a22      	ldr	r2, [pc, #136]	; (8004830 <xTaskIncrementTick+0x15c>)
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4a1f      	ldr	r2, [pc, #124]	; (8004834 <xTaskIncrementTick+0x160>)
 80047b6:	441a      	add	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	4610      	mov	r0, r2
 80047c0:	f7ff fc36 	bl	8004030 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <xTaskIncrementTick+0x164>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d3b9      	bcc.n	8004746 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80047d2:	2301      	movs	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047d6:	e7b6      	b.n	8004746 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047d8:	4b17      	ldr	r3, [pc, #92]	; (8004838 <xTaskIncrementTick+0x164>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047de:	4915      	ldr	r1, [pc, #84]	; (8004834 <xTaskIncrementTick+0x160>)
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d907      	bls.n	8004800 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e004      	b.n	8004800 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80047f6:	4b11      	ldr	r3, [pc, #68]	; (800483c <xTaskIncrementTick+0x168>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3301      	adds	r3, #1
 80047fc:	4a0f      	ldr	r2, [pc, #60]	; (800483c <xTaskIncrementTick+0x168>)
 80047fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004800:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <xTaskIncrementTick+0x16c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800480c:	697b      	ldr	r3, [r7, #20]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	200002f8 	.word	0x200002f8
 800481c:	200002d4 	.word	0x200002d4
 8004820:	20000288 	.word	0x20000288
 8004824:	2000028c 	.word	0x2000028c
 8004828:	200002e8 	.word	0x200002e8
 800482c:	200002f0 	.word	0x200002f0
 8004830:	200002d8 	.word	0x200002d8
 8004834:	200001d4 	.word	0x200001d4
 8004838:	200001d0 	.word	0x200001d0
 800483c:	200002e0 	.word	0x200002e0
 8004840:	200002e4 	.word	0x200002e4

08004844 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800484a:	4b26      	ldr	r3, [pc, #152]	; (80048e4 <vTaskSwitchContext+0xa0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004852:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <vTaskSwitchContext+0xa4>)
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004858:	e03e      	b.n	80048d8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800485a:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <vTaskSwitchContext+0xa4>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004860:	4b22      	ldr	r3, [pc, #136]	; (80048ec <vTaskSwitchContext+0xa8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800486e:	7afb      	ldrb	r3, [r7, #11]
 8004870:	f1c3 031f 	rsb	r3, r3, #31
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	491e      	ldr	r1, [pc, #120]	; (80048f0 <vTaskSwitchContext+0xac>)
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <vTaskSwitchContext+0x5a>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	e7fe      	b.n	800489c <vTaskSwitchContext+0x58>
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4a11      	ldr	r2, [pc, #68]	; (80048f0 <vTaskSwitchContext+0xac>)
 80048aa:	4413      	add	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	605a      	str	r2, [r3, #4]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	3308      	adds	r3, #8
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d104      	bne.n	80048ce <vTaskSwitchContext+0x8a>
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a07      	ldr	r2, [pc, #28]	; (80048f4 <vTaskSwitchContext+0xb0>)
 80048d6:	6013      	str	r3, [r2, #0]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	200002f8 	.word	0x200002f8
 80048e8:	200002e4 	.word	0x200002e4
 80048ec:	200002d8 	.word	0x200002d8
 80048f0:	200001d4 	.word	0x200001d4
 80048f4:	200001d0 	.word	0x200001d0

080048f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004900:	f000 f852 	bl	80049a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <prvIdleTask+0x28>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d9f9      	bls.n	8004900 <prvIdleTask+0x8>
			{
				taskYIELD();
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <prvIdleTask+0x2c>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800491c:	e7f0      	b.n	8004900 <prvIdleTask+0x8>
 800491e:	bf00      	nop
 8004920:	200001d4 	.word	0x200001d4
 8004924:	e000ed04 	.word	0xe000ed04

08004928 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800492e:	2300      	movs	r3, #0
 8004930:	607b      	str	r3, [r7, #4]
 8004932:	e00c      	b.n	800494e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4a12      	ldr	r2, [pc, #72]	; (8004988 <prvInitialiseTaskLists+0x60>)
 8004940:	4413      	add	r3, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fb47 	bl	8003fd6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3301      	adds	r3, #1
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b06      	cmp	r3, #6
 8004952:	d9ef      	bls.n	8004934 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004954:	480d      	ldr	r0, [pc, #52]	; (800498c <prvInitialiseTaskLists+0x64>)
 8004956:	f7ff fb3e 	bl	8003fd6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800495a:	480d      	ldr	r0, [pc, #52]	; (8004990 <prvInitialiseTaskLists+0x68>)
 800495c:	f7ff fb3b 	bl	8003fd6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004960:	480c      	ldr	r0, [pc, #48]	; (8004994 <prvInitialiseTaskLists+0x6c>)
 8004962:	f7ff fb38 	bl	8003fd6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004966:	480c      	ldr	r0, [pc, #48]	; (8004998 <prvInitialiseTaskLists+0x70>)
 8004968:	f7ff fb35 	bl	8003fd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800496c:	480b      	ldr	r0, [pc, #44]	; (800499c <prvInitialiseTaskLists+0x74>)
 800496e:	f7ff fb32 	bl	8003fd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <prvInitialiseTaskLists+0x78>)
 8004974:	4a05      	ldr	r2, [pc, #20]	; (800498c <prvInitialiseTaskLists+0x64>)
 8004976:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004978:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <prvInitialiseTaskLists+0x7c>)
 800497a:	4a05      	ldr	r2, [pc, #20]	; (8004990 <prvInitialiseTaskLists+0x68>)
 800497c:	601a      	str	r2, [r3, #0]
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	200001d4 	.word	0x200001d4
 800498c:	20000260 	.word	0x20000260
 8004990:	20000274 	.word	0x20000274
 8004994:	20000290 	.word	0x20000290
 8004998:	200002a4 	.word	0x200002a4
 800499c:	200002bc 	.word	0x200002bc
 80049a0:	20000288 	.word	0x20000288
 80049a4:	2000028c 	.word	0x2000028c

080049a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049ae:	e019      	b.n	80049e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049b0:	f000 fa04 	bl	8004dbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b4:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <prvCheckTasksWaitingTermination+0x4c>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3304      	adds	r3, #4
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fb92 	bl	80040ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <prvCheckTasksWaitingTermination+0x50>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <prvCheckTasksWaitingTermination+0x50>)
 80049ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <prvCheckTasksWaitingTermination+0x54>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	4a09      	ldr	r2, [pc, #36]	; (80049fc <prvCheckTasksWaitingTermination+0x54>)
 80049d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049da:	f000 fa1d 	bl	8004e18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f80e 	bl	8004a00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <prvCheckTasksWaitingTermination+0x54>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e1      	bne.n	80049b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	200002a4 	.word	0x200002a4
 80049f8:	200002d0 	.word	0x200002d0
 80049fc:	200002b8 	.word	0x200002b8

08004a00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d108      	bne.n	8004a24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fb6e 	bl	80050f8 <vPortFree>
				vPortFree( pxTCB );
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fb6b 	bl	80050f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a22:	e017      	b.n	8004a54 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d103      	bne.n	8004a36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fb62 	bl	80050f8 <vPortFree>
	}
 8004a34:	e00e      	b.n	8004a54 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d009      	beq.n	8004a54 <prvDeleteTCB+0x54>
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	e7fe      	b.n	8004a52 <prvDeleteTCB+0x52>
	}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <prvResetNextTaskUnblockTime+0x38>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <prvResetNextTaskUnblockTime+0x3c>)
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a74:	e008      	b.n	8004a88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <prvResetNextTaskUnblockTime+0x38>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4a04      	ldr	r2, [pc, #16]	; (8004a98 <prvResetNextTaskUnblockTime+0x3c>)
 8004a86:	6013      	str	r3, [r2, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	20000288 	.word	0x20000288
 8004a98:	200002f0 	.word	0x200002f0

08004a9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004aa6:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aac:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fb19 	bl	80040ea <uxListRemove>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004abe:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	43da      	mvns	r2, r3
 8004acc:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ad4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d10a      	bne.n	8004af4 <prvAddCurrentTaskToDelayedList+0x58>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae4:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	4619      	mov	r1, r3
 8004aec:	481a      	ldr	r0, [pc, #104]	; (8004b58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004aee:	f7ff fa9f 	bl	8004030 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004af2:	e026      	b.n	8004b42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4413      	add	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004afc:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d209      	bcs.n	8004b20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b0c:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f7ff faad 	bl	8004078 <vListInsert>
}
 8004b1e:	e010      	b.n	8004b42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f7ff faa3 	bl	8004078 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b32:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d202      	bcs.n	8004b42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b3c:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6013      	str	r3, [r2, #0]
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	200002d4 	.word	0x200002d4
 8004b50:	200001d0 	.word	0x200001d0
 8004b54:	200002d8 	.word	0x200002d8
 8004b58:	200002bc 	.word	0x200002bc
 8004b5c:	2000028c 	.word	0x2000028c
 8004b60:	20000288 	.word	0x20000288
 8004b64:	200002f0 	.word	0x200002f0

08004b68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3b04      	subs	r3, #4
 8004b78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3b04      	subs	r3, #4
 8004b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f023 0201 	bic.w	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3b04      	subs	r3, #4
 8004b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b98:	4a0c      	ldr	r2, [pc, #48]	; (8004bcc <pxPortInitialiseStack+0x64>)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3b14      	subs	r3, #20
 8004ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3b04      	subs	r3, #4
 8004bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f06f 0202 	mvn.w	r2, #2
 8004bb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3b20      	subs	r3, #32
 8004bbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	08004bd1 	.word	0x08004bd1

08004bd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <prvTaskExitError+0x50>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d009      	beq.n	8004bf8 <prvTaskExitError+0x28>
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	e7fe      	b.n	8004bf6 <prvTaskExitError+0x26>
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c0a:	bf00      	nop
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0fc      	beq.n	8004c0c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000008 	.word	0x20000008
	...

08004c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <pxCurrentTCBConst2>)
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	6808      	ldr	r0, [r1, #0]
 8004c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3a:	f380 8809 	msr	PSP, r0
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8811 	msr	BASEPRI, r0
 8004c4a:	4770      	bx	lr
 8004c4c:	f3af 8000 	nop.w

08004c50 <pxCurrentTCBConst2>:
 8004c50:	200001d0 	.word	0x200001d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop

08004c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c58:	4808      	ldr	r0, [pc, #32]	; (8004c7c <prvPortStartFirstTask+0x24>)
 8004c5a:	6800      	ldr	r0, [r0, #0]
 8004c5c:	6800      	ldr	r0, [r0, #0]
 8004c5e:	f380 8808 	msr	MSP, r0
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f380 8814 	msr	CONTROL, r0
 8004c6a:	b662      	cpsie	i
 8004c6c:	b661      	cpsie	f
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	df00      	svc	0
 8004c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c7a:	bf00      	nop
 8004c7c:	e000ed08 	.word	0xe000ed08

08004c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c86:	4b44      	ldr	r3, [pc, #272]	; (8004d98 <xPortStartScheduler+0x118>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a44      	ldr	r2, [pc, #272]	; (8004d9c <xPortStartScheduler+0x11c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d109      	bne.n	8004ca4 <xPortStartScheduler+0x24>
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e7fe      	b.n	8004ca2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ca4:	4b3c      	ldr	r3, [pc, #240]	; (8004d98 <xPortStartScheduler+0x118>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a3d      	ldr	r2, [pc, #244]	; (8004da0 <xPortStartScheduler+0x120>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d109      	bne.n	8004cc2 <xPortStartScheduler+0x42>
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e7fe      	b.n	8004cc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cc2:	4b38      	ldr	r3, [pc, #224]	; (8004da4 <xPortStartScheduler+0x124>)
 8004cc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	22ff      	movs	r2, #255	; 0xff
 8004cd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	4b30      	ldr	r3, [pc, #192]	; (8004da8 <xPortStartScheduler+0x128>)
 8004ce8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cea:	4b30      	ldr	r3, [pc, #192]	; (8004dac <xPortStartScheduler+0x12c>)
 8004cec:	2207      	movs	r2, #7
 8004cee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cf0:	e009      	b.n	8004d06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004cf2:	4b2e      	ldr	r3, [pc, #184]	; (8004dac <xPortStartScheduler+0x12c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <xPortStartScheduler+0x12c>)
 8004cfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0e:	2b80      	cmp	r3, #128	; 0x80
 8004d10:	d0ef      	beq.n	8004cf2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d12:	4b26      	ldr	r3, [pc, #152]	; (8004dac <xPortStartScheduler+0x12c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f1c3 0307 	rsb	r3, r3, #7
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d009      	beq.n	8004d32 <xPortStartScheduler+0xb2>
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	e7fe      	b.n	8004d30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d32:	4b1e      	ldr	r3, [pc, #120]	; (8004dac <xPortStartScheduler+0x12c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <xPortStartScheduler+0x12c>)
 8004d3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <xPortStartScheduler+0x12c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d44:	4a19      	ldr	r2, [pc, #100]	; (8004dac <xPortStartScheduler+0x12c>)
 8004d46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d50:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <xPortStartScheduler+0x130>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <xPortStartScheduler+0x130>)
 8004d56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d5c:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <xPortStartScheduler+0x130>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <xPortStartScheduler+0x130>)
 8004d62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d68:	f000 f8d6 	bl	8004f18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <xPortStartScheduler+0x134>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d72:	f000 f8f5 	bl	8004f60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <xPortStartScheduler+0x138>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a0f      	ldr	r2, [pc, #60]	; (8004db8 <xPortStartScheduler+0x138>)
 8004d7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d82:	f7ff ff69 	bl	8004c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d86:	f7ff fd5d 	bl	8004844 <vTaskSwitchContext>
	prvTaskExitError();
 8004d8a:	f7ff ff21 	bl	8004bd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	e000ed00 	.word	0xe000ed00
 8004d9c:	410fc271 	.word	0x410fc271
 8004da0:	410fc270 	.word	0x410fc270
 8004da4:	e000e400 	.word	0xe000e400
 8004da8:	200002fc 	.word	0x200002fc
 8004dac:	20000300 	.word	0x20000300
 8004db0:	e000ed20 	.word	0xe000ed20
 8004db4:	20000008 	.word	0x20000008
 8004db8:	e000ef34 	.word	0xe000ef34

08004dbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	; (8004e10 <vPortEnterCritical+0x54>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	4a0d      	ldr	r2, [pc, #52]	; (8004e10 <vPortEnterCritical+0x54>)
 8004ddc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dde:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <vPortEnterCritical+0x54>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10e      	bne.n	8004e04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <vPortEnterCritical+0x58>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d009      	beq.n	8004e04 <vPortEnterCritical+0x48>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	603b      	str	r3, [r7, #0]
 8004e02:	e7fe      	b.n	8004e02 <vPortEnterCritical+0x46>
	}
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	20000008 	.word	0x20000008
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <vPortExitCritical+0x4c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <vPortExitCritical+0x22>
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	e7fe      	b.n	8004e38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <vPortExitCritical+0x4c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <vPortExitCritical+0x4c>)
 8004e42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <vPortExitCritical+0x4c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <vPortExitCritical+0x3e>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000008 	.word	0x20000008
	...

08004e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e70:	f3ef 8009 	mrs	r0, PSP
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <pxCurrentTCBConst>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	f01e 0f10 	tst.w	lr, #16
 8004e80:	bf08      	it	eq
 8004e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8a:	6010      	str	r0, [r2, #0]
 8004e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e94:	f380 8811 	msr	BASEPRI, r0
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f7ff fcd0 	bl	8004844 <vTaskSwitchContext>
 8004ea4:	f04f 0000 	mov.w	r0, #0
 8004ea8:	f380 8811 	msr	BASEPRI, r0
 8004eac:	bc09      	pop	{r0, r3}
 8004eae:	6819      	ldr	r1, [r3, #0]
 8004eb0:	6808      	ldr	r0, [r1, #0]
 8004eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb6:	f01e 0f10 	tst.w	lr, #16
 8004eba:	bf08      	it	eq
 8004ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ec0:	f380 8809 	msr	PSP, r0
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	f3af 8000 	nop.w

08004ed0 <pxCurrentTCBConst>:
 8004ed0:	200001d0 	.word	0x200001d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ef0:	f7ff fbf0 	bl	80046d4 <xTaskIncrementTick>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <SysTick_Handler+0x3c>)
 8004efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	e000ed04 	.word	0xe000ed04

08004f18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <vPortSetupTimerInterrupt+0x34>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f22:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <vPortSetupTimerInterrupt+0x38>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <vPortSetupTimerInterrupt+0x3c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <vPortSetupTimerInterrupt+0x40>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	099b      	lsrs	r3, r3, #6
 8004f34:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <vPortSetupTimerInterrupt+0x44>)
 8004f36:	3b01      	subs	r3, #1
 8004f38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f3a:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <vPortSetupTimerInterrupt+0x34>)
 8004f3c:	2207      	movs	r2, #7
 8004f3e:	601a      	str	r2, [r3, #0]
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	e000e010 	.word	0xe000e010
 8004f50:	e000e018 	.word	0xe000e018
 8004f54:	2000014c 	.word	0x2000014c
 8004f58:	10624dd3 	.word	0x10624dd3
 8004f5c:	e000e014 	.word	0xe000e014

08004f60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f70 <vPortEnableVFP+0x10>
 8004f64:	6801      	ldr	r1, [r0, #0]
 8004f66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f6a:	6001      	str	r1, [r0, #0]
 8004f6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f6e:	bf00      	nop
 8004f70:	e000ed88 	.word	0xe000ed88

08004f74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f80:	f7ff fafe 	bl	8004580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f84:	4b57      	ldr	r3, [pc, #348]	; (80050e4 <pvPortMalloc+0x170>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f8c:	f000 f90c 	bl	80051a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f90:	4b55      	ldr	r3, [pc, #340]	; (80050e8 <pvPortMalloc+0x174>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f040 808c 	bne.w	80050b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01c      	beq.n	8004fde <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4413      	add	r3, r2
 8004faa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d013      	beq.n	8004fde <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f023 0307 	bic.w	r3, r3, #7
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <pvPortMalloc+0x6a>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e7fe      	b.n	8004fdc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d068      	beq.n	80050b6 <pvPortMalloc+0x142>
 8004fe4:	4b41      	ldr	r3, [pc, #260]	; (80050ec <pvPortMalloc+0x178>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d863      	bhi.n	80050b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fee:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <pvPortMalloc+0x17c>)
 8004ff0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ff2:	4b3f      	ldr	r3, [pc, #252]	; (80050f0 <pvPortMalloc+0x17c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ff8:	e004      	b.n	8005004 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d903      	bls.n	8005016 <pvPortMalloc+0xa2>
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f1      	bne.n	8004ffa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005016:	4b33      	ldr	r3, [pc, #204]	; (80050e4 <pvPortMalloc+0x170>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501c:	429a      	cmp	r2, r3
 800501e:	d04a      	beq.n	80050b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2208      	movs	r2, #8
 8005026:	4413      	add	r3, r2
 8005028:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	1ad2      	subs	r2, r2, r3
 800503a:	2308      	movs	r3, #8
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	429a      	cmp	r2, r3
 8005040:	d91e      	bls.n	8005080 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4413      	add	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	2b00      	cmp	r3, #0
 8005052:	d009      	beq.n	8005068 <pvPortMalloc+0xf4>
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	e7fe      	b.n	8005066 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	1ad2      	subs	r2, r2, r3
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800507a:	69b8      	ldr	r0, [r7, #24]
 800507c:	f000 f8f6 	bl	800526c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005080:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <pvPortMalloc+0x178>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	4a18      	ldr	r2, [pc, #96]	; (80050ec <pvPortMalloc+0x178>)
 800508c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800508e:	4b17      	ldr	r3, [pc, #92]	; (80050ec <pvPortMalloc+0x178>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <pvPortMalloc+0x180>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d203      	bcs.n	80050a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800509a:	4b14      	ldr	r3, [pc, #80]	; (80050ec <pvPortMalloc+0x178>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a15      	ldr	r2, [pc, #84]	; (80050f4 <pvPortMalloc+0x180>)
 80050a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <pvPortMalloc+0x174>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050b6:	f7ff fa71 	bl	800459c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <pvPortMalloc+0x164>
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e7fe      	b.n	80050d6 <pvPortMalloc+0x162>
	return pvReturn;
 80050d8:	69fb      	ldr	r3, [r7, #28]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3728      	adds	r7, #40	; 0x28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000ec4 	.word	0x20000ec4
 80050e8:	20000ed0 	.word	0x20000ed0
 80050ec:	20000ec8 	.word	0x20000ec8
 80050f0:	20000ebc 	.word	0x20000ebc
 80050f4:	20000ecc 	.word	0x20000ecc

080050f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d046      	beq.n	8005198 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800510a:	2308      	movs	r3, #8
 800510c:	425b      	negs	r3, r3
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <vPortFree+0xa8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <vPortFree+0x42>
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	e7fe      	b.n	8005138 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <vPortFree+0x5e>
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	e7fe      	b.n	8005154 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <vPortFree+0xa8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d019      	beq.n	8005198 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d115      	bne.n	8005198 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <vPortFree+0xa8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	43db      	mvns	r3, r3
 8005176:	401a      	ands	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800517c:	f7ff fa00 	bl	8004580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <vPortFree+0xac>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4413      	add	r3, r2
 800518a:	4a06      	ldr	r2, [pc, #24]	; (80051a4 <vPortFree+0xac>)
 800518c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800518e:	6938      	ldr	r0, [r7, #16]
 8005190:	f000 f86c 	bl	800526c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005194:	f7ff fa02 	bl	800459c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005198:	bf00      	nop
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20000ed0 	.word	0x20000ed0
 80051a4:	20000ec8 	.word	0x20000ec8

080051a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80051b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051b4:	4b27      	ldr	r3, [pc, #156]	; (8005254 <prvHeapInit+0xac>)
 80051b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00c      	beq.n	80051dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3307      	adds	r3, #7
 80051c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0307 	bic.w	r3, r3, #7
 80051ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <prvHeapInit+0xac>)
 80051d8:	4413      	add	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051e0:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <prvHeapInit+0xb0>)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051e6:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <prvHeapInit+0xb0>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	4413      	add	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051f4:	2208      	movs	r2, #8
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1a9b      	subs	r3, r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0307 	bic.w	r3, r3, #7
 8005202:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a15      	ldr	r2, [pc, #84]	; (800525c <prvHeapInit+0xb4>)
 8005208:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800520a:	4b14      	ldr	r3, [pc, #80]	; (800525c <prvHeapInit+0xb4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2200      	movs	r2, #0
 8005210:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <prvHeapInit+0xb4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	1ad2      	subs	r2, r2, r3
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <prvHeapInit+0xb4>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4a0a      	ldr	r2, [pc, #40]	; (8005260 <prvHeapInit+0xb8>)
 8005236:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4a09      	ldr	r2, [pc, #36]	; (8005264 <prvHeapInit+0xbc>)
 800523e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005240:	4b09      	ldr	r3, [pc, #36]	; (8005268 <prvHeapInit+0xc0>)
 8005242:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005246:	601a      	str	r2, [r3, #0]
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	20000304 	.word	0x20000304
 8005258:	20000ebc 	.word	0x20000ebc
 800525c:	20000ec4 	.word	0x20000ec4
 8005260:	20000ecc 	.word	0x20000ecc
 8005264:	20000ec8 	.word	0x20000ec8
 8005268:	20000ed0 	.word	0x20000ed0

0800526c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005274:	4b28      	ldr	r3, [pc, #160]	; (8005318 <prvInsertBlockIntoFreeList+0xac>)
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e002      	b.n	8005280 <prvInsertBlockIntoFreeList+0x14>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d8f7      	bhi.n	800527a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	4413      	add	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	429a      	cmp	r2, r3
 800529a:	d108      	bne.n	80052ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	441a      	add	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	441a      	add	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d118      	bne.n	80052f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b15      	ldr	r3, [pc, #84]	; (800531c <prvInsertBlockIntoFreeList+0xb0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d00d      	beq.n	80052ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	441a      	add	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	e008      	b.n	80052fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052ea:	4b0c      	ldr	r3, [pc, #48]	; (800531c <prvInsertBlockIntoFreeList+0xb0>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e003      	b.n	80052fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	429a      	cmp	r2, r3
 8005302:	d002      	beq.n	800530a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000ebc 	.word	0x20000ebc
 800531c:	20000ec4 	.word	0x20000ec4

08005320 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a07      	ldr	r2, [pc, #28]	; (800534c <vApplicationGetIdleTaskMemory+0x2c>)
 8005330:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4a06      	ldr	r2, [pc, #24]	; (8005350 <vApplicationGetIdleTaskMemory+0x30>)
 8005336:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2280      	movs	r2, #128	; 0x80
 800533c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000ed4 	.word	0x20000ed4
 8005350:	20000f28 	.word	0x20000f28

08005354 <flightDataFirstRow>:
static char plane_right[] = "\n\t\t+--__   / /\n\t\t      -o0o__\n\t\t            --+";
static char plane_left[] = "\n\t\t      \\ \\   __+\n\t\t     __o0o--\n\t\t+__--";
static char plane_up[] = "\n\t\t      /\\\n\t\t   _/ |0| \\_\n\t\t  /   |  |  \\\n\t\t /  _ \\ / _  \\\n\t\t+__/ \\o0o/ \\__+";
static char plane_down[] = "\n\t\t     \\ /\n\t\t+____o0o____+\n\t\t \\   | |   /\n\t\t  \\__| |__/\n\t\t     \\/";

void flightDataFirstRow(char *first_row, uint16_t altitude, uint16_t speed) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af02      	add	r7, sp, #8
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	807b      	strh	r3, [r7, #2]
 8005360:	4613      	mov	r3, r2
 8005362:	803b      	strh	r3, [r7, #0]
	snprintf(first_row,40,"\nAltitude: %d ft \tSpeed: %d km/h", altitude, speed);
 8005364:	887a      	ldrh	r2, [r7, #2]
 8005366:	883b      	ldrh	r3, [r7, #0]
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	4613      	mov	r3, r2
 800536c:	4a04      	ldr	r2, [pc, #16]	; (8005380 <flightDataFirstRow+0x2c>)
 800536e:	2128      	movs	r1, #40	; 0x28
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fe01 	bl	8005f78 <sniprintf>
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	080067b8 	.word	0x080067b8

08005384 <flightDataSecondRow>:

void flightDataSecondRow(char *second_row, char *instruction, uint8_t time) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	4613      	mov	r3, r2
 8005390:	71fb      	strb	r3, [r7, #7]
	snprintf(second_row,70,"\nInstruction: %s \tRemaining Time: %d s\n", instruction, time);
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4a04      	ldr	r2, [pc, #16]	; (80053ac <flightDataSecondRow+0x28>)
 800539a:	2146      	movs	r1, #70	; 0x46
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fdeb 	bl	8005f78 <sniprintf>
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	080067dc 	.word	0x080067dc

080053b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80053b0:	b5b0      	push	{r4, r5, r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80053b6:	f7fb f8db 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80053ba:	f000 f82d 	bl	8005418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80053be:	f000 f9d9 	bl	8005774 <MX_GPIO_Init>
  MX_DMA_Init();
 80053c2:	f000 f9b9 	bl	8005738 <MX_DMA_Init>
  MX_DAC1_Init();
 80053c6:	f000 f8a1 	bl	800550c <MX_DAC1_Init>
  MX_TIM2_Init();
 80053ca:	f000 f937 	bl	800563c <MX_TIM2_Init>
  MX_I2C2_Init();
 80053ce:	f000 f8cf 	bl	8005570 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80053d2:	f000 f90d 	bl	80055f0 <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 80053d6:	f000 f97f 	bl	80056d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET); // Turn Red LED off
 80053da:	2201      	movs	r2, #1
 80053dc:	2108      	movs	r1, #8
 80053de:	480b      	ldr	r0, [pc, #44]	; (800540c <main+0x5c>)
 80053e0:	f7fb febc 	bl	800115c <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80053e4:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <main+0x60>)
 80053e6:	1d3c      	adds	r4, r7, #4
 80053e8:	461d      	mov	r5, r3
 80053ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80053f6:	1d3b      	adds	r3, r7, #4
 80053f8:	2100      	movs	r1, #0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe fd8b 	bl	8003f16 <osThreadCreate>
 8005400:	4602      	mov	r2, r0
 8005402:	4b04      	ldr	r3, [pc, #16]	; (8005414 <main+0x64>)
 8005404:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005406:	f7fe fd7f 	bl	8003f08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800540a:	e7fe      	b.n	800540a <main+0x5a>
 800540c:	48001000 	.word	0x48001000
 8005410:	08006810 	.word	0x08006810
 8005414:	200011a8 	.word	0x200011a8

08005418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b0b8      	sub	sp, #224	; 0xe0
 800541c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800541e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005422:	2244      	movs	r2, #68	; 0x44
 8005424:	2100      	movs	r1, #0
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fd9d 	bl	8005f66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800542c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	60da      	str	r2, [r3, #12]
 800543a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800543c:	463b      	mov	r3, r7
 800543e:	2288      	movs	r2, #136	; 0x88
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fd8f 	bl	8005f66 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005448:	2310      	movs	r3, #16
 800544a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800544e:	2301      	movs	r3, #1
 8005450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800545a:	2360      	movs	r3, #96	; 0x60
 800545c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005460:	2302      	movs	r3, #2
 8005462:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005466:	2301      	movs	r3, #1
 8005468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800546c:	2301      	movs	r3, #1
 800546e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005472:	2328      	movs	r3, #40	; 0x28
 8005474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005478:	2307      	movs	r3, #7
 800547a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800547e:	2302      	movs	r3, #2
 8005480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005484:	2302      	movs	r3, #2
 8005486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800548a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800548e:	4618      	mov	r0, r3
 8005490:	f7fc f8e6 	bl	8001660 <HAL_RCC_OscConfig>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800549a:	f000 fa6b 	bl	8005974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800549e:	230f      	movs	r3, #15
 80054a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054a4:	2303      	movs	r3, #3
 80054a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80054b6:	2300      	movs	r3, #0
 80054b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80054bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80054c0:	2104      	movs	r1, #4
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fc fcb2 	bl	8001e2c <HAL_RCC_ClockConfig>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80054ce:	f000 fa51 	bl	8005974 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 80054d2:	2381      	movs	r3, #129	; 0x81
 80054d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80054d6:	2300      	movs	r3, #0
 80054d8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80054da:	2300      	movs	r3, #0
 80054dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054de:	463b      	mov	r3, r7
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fc fed9 	bl	8002298 <HAL_RCCEx_PeriphCLKConfig>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80054ec:	f000 fa42 	bl	8005974 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80054f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80054f4:	f7fb ffa2 	bl	800143c <HAL_PWREx_ControlVoltageScaling>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80054fe:	f000 fa39 	bl	8005974 <Error_Handler>
  }
}
 8005502:	bf00      	nop
 8005504:	37e0      	adds	r7, #224	; 0xe0
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005512:	1d3b      	adds	r3, r7, #4
 8005514:	2224      	movs	r2, #36	; 0x24
 8005516:	2100      	movs	r1, #0
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fd24 	bl	8005f66 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800551e:	4b12      	ldr	r3, [pc, #72]	; (8005568 <MX_DAC1_Init+0x5c>)
 8005520:	4a12      	ldr	r2, [pc, #72]	; (800556c <MX_DAC1_Init+0x60>)
 8005522:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005524:	4810      	ldr	r0, [pc, #64]	; (8005568 <MX_DAC1_Init+0x5c>)
 8005526:	f7fb f95f 	bl	80007e8 <HAL_DAC_Init>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8005530:	f000 fa20 	bl	8005974 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005534:	2300      	movs	r3, #0
 8005536:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8005538:	2324      	movs	r3, #36	; 0x24
 800553a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	2200      	movs	r2, #0
 800554c:	4619      	mov	r1, r3
 800554e:	4806      	ldr	r0, [pc, #24]	; (8005568 <MX_DAC1_Init+0x5c>)
 8005550:	f7fb f9d0 	bl	80008f4 <HAL_DAC_ConfigChannel>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800555a:	f000 fa0b 	bl	8005974 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800555e:	bf00      	nop
 8005560:	3728      	adds	r7, #40	; 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200011ac 	.word	0x200011ac
 800556c:	40007400 	.word	0x40007400

08005570 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005574:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <MX_I2C2_Init+0x74>)
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <MX_I2C2_Init+0x78>)
 8005578:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800557a:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <MX_I2C2_Init+0x74>)
 800557c:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <MX_I2C2_Init+0x7c>)
 800557e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005580:	4b18      	ldr	r3, [pc, #96]	; (80055e4 <MX_I2C2_Init+0x74>)
 8005582:	2200      	movs	r2, #0
 8005584:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005586:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <MX_I2C2_Init+0x74>)
 8005588:	2201      	movs	r2, #1
 800558a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800558c:	4b15      	ldr	r3, [pc, #84]	; (80055e4 <MX_I2C2_Init+0x74>)
 800558e:	2200      	movs	r2, #0
 8005590:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005592:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <MX_I2C2_Init+0x74>)
 8005594:	2200      	movs	r2, #0
 8005596:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005598:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <MX_I2C2_Init+0x74>)
 800559a:	2200      	movs	r2, #0
 800559c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800559e:	4b11      	ldr	r3, [pc, #68]	; (80055e4 <MX_I2C2_Init+0x74>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055a4:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <MX_I2C2_Init+0x74>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80055aa:	480e      	ldr	r0, [pc, #56]	; (80055e4 <MX_I2C2_Init+0x74>)
 80055ac:	f7fb fe11 	bl	80011d2 <HAL_I2C_Init>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80055b6:	f000 f9dd 	bl	8005974 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80055ba:	2100      	movs	r1, #0
 80055bc:	4809      	ldr	r0, [pc, #36]	; (80055e4 <MX_I2C2_Init+0x74>)
 80055be:	f7fb fe97 	bl	80012f0 <HAL_I2CEx_ConfigAnalogFilter>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80055c8:	f000 f9d4 	bl	8005974 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80055cc:	2100      	movs	r1, #0
 80055ce:	4805      	ldr	r0, [pc, #20]	; (80055e4 <MX_I2C2_Init+0x74>)
 80055d0:	f7fb fed9 	bl	8001386 <HAL_I2CEx_ConfigDigitalFilter>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80055da:	f000 f9cb 	bl	8005974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	200011c0 	.word	0x200011c0
 80055e8:	40005800 	.word	0x40005800
 80055ec:	10909cec 	.word	0x10909cec

080055f0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80055f4:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <MX_QUADSPI_Init+0x44>)
 80055f6:	4a10      	ldr	r2, [pc, #64]	; (8005638 <MX_QUADSPI_Init+0x48>)
 80055f8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80055fa:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <MX_QUADSPI_Init+0x44>)
 80055fc:	22ff      	movs	r2, #255	; 0xff
 80055fe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <MX_QUADSPI_Init+0x44>)
 8005602:	2201      	movs	r2, #1
 8005604:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8005606:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <MX_QUADSPI_Init+0x44>)
 8005608:	2200      	movs	r2, #0
 800560a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <MX_QUADSPI_Init+0x44>)
 800560e:	2201      	movs	r2, #1
 8005610:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8005612:	4b08      	ldr	r3, [pc, #32]	; (8005634 <MX_QUADSPI_Init+0x44>)
 8005614:	2200      	movs	r2, #0
 8005616:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8005618:	4b06      	ldr	r3, [pc, #24]	; (8005634 <MX_QUADSPI_Init+0x44>)
 800561a:	2200      	movs	r2, #0
 800561c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800561e:	4805      	ldr	r0, [pc, #20]	; (8005634 <MX_QUADSPI_Init+0x44>)
 8005620:	f7fb ff62 	bl	80014e8 <HAL_QSPI_Init>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800562a:	f000 f9a3 	bl	8005974 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20001320 	.word	0x20001320
 8005638:	a0001000 	.word	0xa0001000

0800563c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005642:	f107 0310 	add.w	r3, r7, #16
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	609a      	str	r2, [r3, #8]
 800564e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005650:	1d3b      	adds	r3, r7, #4
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	605a      	str	r2, [r3, #4]
 8005658:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800565a:	4b1e      	ldr	r3, [pc, #120]	; (80056d4 <MX_TIM2_Init+0x98>)
 800565c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005660:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005662:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <MX_TIM2_Init+0x98>)
 8005664:	2200      	movs	r2, #0
 8005666:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005668:	4b1a      	ldr	r3, [pc, #104]	; (80056d4 <MX_TIM2_Init+0x98>)
 800566a:	2200      	movs	r2, #0
 800566c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 800566e:	4b19      	ldr	r3, [pc, #100]	; (80056d4 <MX_TIM2_Init+0x98>)
 8005670:	f240 7216 	movw	r2, #1814	; 0x716
 8005674:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005676:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <MX_TIM2_Init+0x98>)
 8005678:	2200      	movs	r2, #0
 800567a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800567c:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <MX_TIM2_Init+0x98>)
 800567e:	2200      	movs	r2, #0
 8005680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005682:	4814      	ldr	r0, [pc, #80]	; (80056d4 <MX_TIM2_Init+0x98>)
 8005684:	f7fd fab8 	bl	8002bf8 <HAL_TIM_Base_Init>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800568e:	f000 f971 	bl	8005974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005696:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005698:	f107 0310 	add.w	r3, r7, #16
 800569c:	4619      	mov	r1, r3
 800569e:	480d      	ldr	r0, [pc, #52]	; (80056d4 <MX_TIM2_Init+0x98>)
 80056a0:	f7fd fc91 	bl	8002fc6 <HAL_TIM_ConfigClockSource>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80056aa:	f000 f963 	bl	8005974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80056ae:	2320      	movs	r3, #32
 80056b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80056b6:	1d3b      	adds	r3, r7, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4806      	ldr	r0, [pc, #24]	; (80056d4 <MX_TIM2_Init+0x98>)
 80056bc:	f7fd fe98 	bl	80033f0 <HAL_TIMEx_MasterConfigSynchronization>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80056c6:	f000 f955 	bl	8005974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80056ca:	bf00      	nop
 80056cc:	3720      	adds	r7, #32
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	200012d4 	.word	0x200012d4

080056d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80056dc:	4b14      	ldr	r3, [pc, #80]	; (8005730 <MX_USART1_UART_Init+0x58>)
 80056de:	4a15      	ldr	r2, [pc, #84]	; (8005734 <MX_USART1_UART_Init+0x5c>)
 80056e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80056e2:	4b13      	ldr	r3, [pc, #76]	; (8005730 <MX_USART1_UART_Init+0x58>)
 80056e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056ea:	4b11      	ldr	r3, [pc, #68]	; (8005730 <MX_USART1_UART_Init+0x58>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80056f0:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <MX_USART1_UART_Init+0x58>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80056f6:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <MX_USART1_UART_Init+0x58>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80056fc:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <MX_USART1_UART_Init+0x58>)
 80056fe:	220c      	movs	r2, #12
 8005700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005702:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <MX_USART1_UART_Init+0x58>)
 8005704:	2200      	movs	r2, #0
 8005706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <MX_USART1_UART_Init+0x58>)
 800570a:	2200      	movs	r2, #0
 800570c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800570e:	4b08      	ldr	r3, [pc, #32]	; (8005730 <MX_USART1_UART_Init+0x58>)
 8005710:	2200      	movs	r2, #0
 8005712:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <MX_USART1_UART_Init+0x58>)
 8005716:	2200      	movs	r2, #0
 8005718:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800571a:	4805      	ldr	r0, [pc, #20]	; (8005730 <MX_USART1_UART_Init+0x58>)
 800571c:	f7fd ff0e 	bl	800353c <HAL_UART_Init>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005726:	f000 f925 	bl	8005974 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800572a:	bf00      	nop
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20001254 	.word	0x20001254
 8005734:	40013800 	.word	0x40013800

08005738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800573e:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <MX_DMA_Init+0x38>)
 8005740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005742:	4a0b      	ldr	r2, [pc, #44]	; (8005770 <MX_DMA_Init+0x38>)
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	6493      	str	r3, [r2, #72]	; 0x48
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <MX_DMA_Init+0x38>)
 800574c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005756:	2200      	movs	r2, #0
 8005758:	2100      	movs	r1, #0
 800575a:	200d      	movs	r0, #13
 800575c:	f7fb f81a 	bl	8000794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005760:	200d      	movs	r0, #13
 8005762:	f7fb f833 	bl	80007cc <HAL_NVIC_EnableIRQ>

}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40021000 	.word	0x40021000

08005774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800577a:	f107 0314 	add.w	r3, r7, #20
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	609a      	str	r2, [r3, #8]
 8005786:	60da      	str	r2, [r3, #12]
 8005788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800578a:	4b38      	ldr	r3, [pc, #224]	; (800586c <MX_GPIO_Init+0xf8>)
 800578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578e:	4a37      	ldr	r2, [pc, #220]	; (800586c <MX_GPIO_Init+0xf8>)
 8005790:	f043 0310 	orr.w	r3, r3, #16
 8005794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005796:	4b35      	ldr	r3, [pc, #212]	; (800586c <MX_GPIO_Init+0xf8>)
 8005798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80057a2:	4b32      	ldr	r3, [pc, #200]	; (800586c <MX_GPIO_Init+0xf8>)
 80057a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a6:	4a31      	ldr	r2, [pc, #196]	; (800586c <MX_GPIO_Init+0xf8>)
 80057a8:	f043 0304 	orr.w	r3, r3, #4
 80057ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057ae:	4b2f      	ldr	r3, [pc, #188]	; (800586c <MX_GPIO_Init+0xf8>)
 80057b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ba:	4b2c      	ldr	r3, [pc, #176]	; (800586c <MX_GPIO_Init+0xf8>)
 80057bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057be:	4a2b      	ldr	r2, [pc, #172]	; (800586c <MX_GPIO_Init+0xf8>)
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057c6:	4b29      	ldr	r3, [pc, #164]	; (800586c <MX_GPIO_Init+0xf8>)
 80057c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	60bb      	str	r3, [r7, #8]
 80057d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d2:	4b26      	ldr	r3, [pc, #152]	; (800586c <MX_GPIO_Init+0xf8>)
 80057d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d6:	4a25      	ldr	r2, [pc, #148]	; (800586c <MX_GPIO_Init+0xf8>)
 80057d8:	f043 0302 	orr.w	r3, r3, #2
 80057dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057de:	4b23      	ldr	r3, [pc, #140]	; (800586c <MX_GPIO_Init+0xf8>)
 80057e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	607b      	str	r3, [r7, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80057ea:	2200      	movs	r2, #0
 80057ec:	2108      	movs	r1, #8
 80057ee:	4820      	ldr	r0, [pc, #128]	; (8005870 <MX_GPIO_Init+0xfc>)
 80057f0:	f7fb fcb4 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G2_GPIO_Port, LED_G2_Pin, GPIO_PIN_RESET);
 80057f4:	2200      	movs	r2, #0
 80057f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057fa:	481e      	ldr	r0, [pc, #120]	; (8005874 <MX_GPIO_Init+0x100>)
 80057fc:	f7fb fcae 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8005800:	2308      	movs	r3, #8
 8005802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005804:	2301      	movs	r3, #1
 8005806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005808:	2300      	movs	r3, #0
 800580a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800580c:	2300      	movs	r3, #0
 800580e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8005810:	f107 0314 	add.w	r3, r7, #20
 8005814:	4619      	mov	r1, r3
 8005816:	4816      	ldr	r0, [pc, #88]	; (8005870 <MX_GPIO_Init+0xfc>)
 8005818:	f7fb faf8 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 800581c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <MX_GPIO_Init+0x104>)
 8005824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800582a:	f107 0314 	add.w	r3, r7, #20
 800582e:	4619      	mov	r1, r3
 8005830:	4812      	ldr	r0, [pc, #72]	; (800587c <MX_GPIO_Init+0x108>)
 8005832:	f7fb faeb 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G2_Pin */
  GPIO_InitStruct.Pin = LED_G2_Pin;
 8005836:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800583a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800583c:	2301      	movs	r3, #1
 800583e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005840:	2300      	movs	r3, #0
 8005842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005844:	2300      	movs	r3, #0
 8005846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_G2_GPIO_Port, &GPIO_InitStruct);
 8005848:	f107 0314 	add.w	r3, r7, #20
 800584c:	4619      	mov	r1, r3
 800584e:	4809      	ldr	r0, [pc, #36]	; (8005874 <MX_GPIO_Init+0x100>)
 8005850:	f7fb fadc 	bl	8000e0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005854:	2200      	movs	r2, #0
 8005856:	2100      	movs	r1, #0
 8005858:	2028      	movs	r0, #40	; 0x28
 800585a:	f7fa ff9b 	bl	8000794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800585e:	2028      	movs	r0, #40	; 0x28
 8005860:	f7fa ffb4 	bl	80007cc <HAL_NVIC_EnableIRQ>

}
 8005864:	bf00      	nop
 8005866:	3728      	adds	r7, #40	; 0x28
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40021000 	.word	0x40021000
 8005870:	48001000 	.word	0x48001000
 8005874:	48000400 	.word	0x48000400
 8005878:	10110000 	.word	0x10110000
 800587c:	48000800 	.word	0x48000800

08005880 <testingUART>:

/* USER CODE BEGIN 4 */

void testingUART() {
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t*)plane_straight,sizeof(plane_straight),1000);
 8005884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005888:	221c      	movs	r2, #28
 800588a:	4921      	ldr	r1, [pc, #132]	; (8005910 <testingUART+0x90>)
 800588c:	4821      	ldr	r0, [pc, #132]	; (8005914 <testingUART+0x94>)
 800588e:	f7fd fea3 	bl	80035d8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)plane_right,sizeof(plane_right),1000);
 8005892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005896:	2230      	movs	r2, #48	; 0x30
 8005898:	491f      	ldr	r1, [pc, #124]	; (8005918 <testingUART+0x98>)
 800589a:	481e      	ldr	r0, [pc, #120]	; (8005914 <testingUART+0x94>)
 800589c:	f7fd fe9c 	bl	80035d8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)plane_left,sizeof(plane_left),1000);
 80058a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058a4:	222a      	movs	r2, #42	; 0x2a
 80058a6:	491d      	ldr	r1, [pc, #116]	; (800591c <testingUART+0x9c>)
 80058a8:	481a      	ldr	r0, [pc, #104]	; (8005914 <testingUART+0x94>)
 80058aa:	f7fd fe95 	bl	80035d8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)plane_up,sizeof(plane_up),1000);
 80058ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058b2:	224e      	movs	r2, #78	; 0x4e
 80058b4:	491a      	ldr	r1, [pc, #104]	; (8005920 <testingUART+0xa0>)
 80058b6:	4817      	ldr	r0, [pc, #92]	; (8005914 <testingUART+0x94>)
 80058b8:	f7fd fe8e 	bl	80035d8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)plane_down,sizeof(plane_down),1000);
 80058bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058c0:	2243      	movs	r2, #67	; 0x43
 80058c2:	4918      	ldr	r1, [pc, #96]	; (8005924 <testingUART+0xa4>)
 80058c4:	4813      	ldr	r0, [pc, #76]	; (8005914 <testingUART+0x94>)
 80058c6:	f7fd fe87 	bl	80035d8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)fd_title,sizeof(fd_title),1000);
 80058ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058ce:	2232      	movs	r2, #50	; 0x32
 80058d0:	4915      	ldr	r1, [pc, #84]	; (8005928 <testingUART+0xa8>)
 80058d2:	4810      	ldr	r0, [pc, #64]	; (8005914 <testingUART+0x94>)
 80058d4:	f7fd fe80 	bl	80035d8 <HAL_UART_Transmit>
	flightDataFirstRow(&fd_first_row, 30000, 1500);
 80058d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80058dc:	f247 5130 	movw	r1, #30000	; 0x7530
 80058e0:	4812      	ldr	r0, [pc, #72]	; (800592c <testingUART+0xac>)
 80058e2:	f7ff fd37 	bl	8005354 <flightDataFirstRow>
	flightDataSecondRow(&fd_second_row, "Do a barrel roll", 23);
 80058e6:	2217      	movs	r2, #23
 80058e8:	4911      	ldr	r1, [pc, #68]	; (8005930 <testingUART+0xb0>)
 80058ea:	4812      	ldr	r0, [pc, #72]	; (8005934 <testingUART+0xb4>)
 80058ec:	f7ff fd4a 	bl	8005384 <flightDataSecondRow>
	HAL_UART_Transmit(&huart1,(uint8_t*)fd_first_row,sizeof(fd_first_row),1000);
 80058f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058f4:	2228      	movs	r2, #40	; 0x28
 80058f6:	490d      	ldr	r1, [pc, #52]	; (800592c <testingUART+0xac>)
 80058f8:	4806      	ldr	r0, [pc, #24]	; (8005914 <testingUART+0x94>)
 80058fa:	f7fd fe6d 	bl	80035d8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)fd_second_row,sizeof(fd_second_row),1000);
 80058fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005902:	2246      	movs	r2, #70	; 0x46
 8005904:	490b      	ldr	r1, [pc, #44]	; (8005934 <testingUART+0xb4>)
 8005906:	4803      	ldr	r0, [pc, #12]	; (8005914 <testingUART+0x94>)
 8005908:	f7fd fe66 	bl	80035d8 <HAL_UART_Transmit>
}
 800590c:	bf00      	nop
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000040 	.word	0x20000040
 8005914:	20001254 	.word	0x20001254
 8005918:	2000005c 	.word	0x2000005c
 800591c:	2000008c 	.word	0x2000008c
 8005920:	200000b8 	.word	0x200000b8
 8005924:	20000108 	.word	0x20000108
 8005928:	2000000c 	.word	0x2000000c
 800592c:	20001128 	.word	0x20001128
 8005930:	0800682c 	.word	0x0800682c
 8005934:	20001150 	.word	0x20001150

08005938 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */

	for(;;)
	{
	osDelay(2000);
 8005940:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005944:	f7fe fb33 	bl	8003fae <osDelay>



	// Test uart_display.h
//	game_mode = testingStart(game_mode);
	testingUART();
 8005948:	f7ff ff9a 	bl	8005880 <testingUART>
	osDelay(2000);
 800594c:	e7f8      	b.n	8005940 <StartDefaultTask+0x8>
	...

08005950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a04      	ldr	r2, [pc, #16]	; (8005970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d101      	bne.n	8005966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005962:	f7fa fe1d 	bl	80005a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40001000 	.word	0x40001000

08005974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8005978:	2200      	movs	r2, #0
 800597a:	2108      	movs	r1, #8
 800597c:	4802      	ldr	r0, [pc, #8]	; (8005988 <Error_Handler+0x14>)
 800597e:	f7fb fbed 	bl	800115c <HAL_GPIO_WritePin>
	__BKPT();
 8005982:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 8005984:	bf00      	nop
 8005986:	bd80      	pop	{r7, pc}
 8005988:	48001000 	.word	0x48001000

0800598c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005992:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <HAL_MspInit+0x44>)
 8005994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005996:	4a0e      	ldr	r2, [pc, #56]	; (80059d0 <HAL_MspInit+0x44>)
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	6613      	str	r3, [r2, #96]	; 0x60
 800599e:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <HAL_MspInit+0x44>)
 80059a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	607b      	str	r3, [r7, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059aa:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <HAL_MspInit+0x44>)
 80059ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ae:	4a08      	ldr	r2, [pc, #32]	; (80059d0 <HAL_MspInit+0x44>)
 80059b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b4:	6593      	str	r3, [r2, #88]	; 0x58
 80059b6:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <HAL_MspInit+0x44>)
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000

080059d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	; 0x28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059dc:	f107 0314 	add.w	r3, r7, #20
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	605a      	str	r2, [r3, #4]
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2e      	ldr	r2, [pc, #184]	; (8005aac <HAL_DAC_MspInit+0xd8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d155      	bne.n	8005aa2 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80059f6:	4b2e      	ldr	r3, [pc, #184]	; (8005ab0 <HAL_DAC_MspInit+0xdc>)
 80059f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fa:	4a2d      	ldr	r2, [pc, #180]	; (8005ab0 <HAL_DAC_MspInit+0xdc>)
 80059fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a00:	6593      	str	r3, [r2, #88]	; 0x58
 8005a02:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <HAL_DAC_MspInit+0xdc>)
 8005a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a0e:	4b28      	ldr	r3, [pc, #160]	; (8005ab0 <HAL_DAC_MspInit+0xdc>)
 8005a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a12:	4a27      	ldr	r2, [pc, #156]	; (8005ab0 <HAL_DAC_MspInit+0xdc>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a1a:	4b25      	ldr	r3, [pc, #148]	; (8005ab0 <HAL_DAC_MspInit+0xdc>)
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005a26:	2310      	movs	r3, #16
 8005a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a32:	f107 0314 	add.w	r3, r7, #20
 8005a36:	4619      	mov	r1, r3
 8005a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a3c:	f7fb f9e6 	bl	8000e0c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8005a40:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a42:	4a1d      	ldr	r2, [pc, #116]	; (8005ab8 <HAL_DAC_MspInit+0xe4>)
 8005a44:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8005a46:	4b1b      	ldr	r3, [pc, #108]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a48:	2206      	movs	r2, #6
 8005a4a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a4c:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a4e:	2210      	movs	r2, #16
 8005a50:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a52:	4b18      	ldr	r3, [pc, #96]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005a58:	4b16      	ldr	r3, [pc, #88]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a5a:	2280      	movs	r2, #128	; 0x80
 8005a5c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a64:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8005a6a:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005a70:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8005a76:	480f      	ldr	r0, [pc, #60]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a78:	f7fb f860 	bl	8000b3c <HAL_DMA_Init>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8005a82:	f7ff ff77 	bl	8005974 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a0a      	ldr	r2, [pc, #40]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a8a:	609a      	str	r2, [r3, #8]
 8005a8c:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <HAL_DAC_MspInit+0xe0>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005a92:	2200      	movs	r2, #0
 8005a94:	2100      	movs	r1, #0
 8005a96:	2036      	movs	r0, #54	; 0x36
 8005a98:	f7fa fe7c 	bl	8000794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a9c:	2036      	movs	r0, #54	; 0x36
 8005a9e:	f7fa fe95 	bl	80007cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005aa2:	bf00      	nop
 8005aa4:	3728      	adds	r7, #40	; 0x28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40007400 	.word	0x40007400
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	2000120c 	.word	0x2000120c
 8005ab8:	40020030 	.word	0x40020030

08005abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	; 0x28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ac4:	f107 0314 	add.w	r3, r7, #20
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	605a      	str	r2, [r3, #4]
 8005ace:	609a      	str	r2, [r3, #8]
 8005ad0:	60da      	str	r2, [r3, #12]
 8005ad2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <HAL_I2C_MspInit+0x7c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d128      	bne.n	8005b30 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ade:	4b17      	ldr	r3, [pc, #92]	; (8005b3c <HAL_I2C_MspInit+0x80>)
 8005ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae2:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <HAL_I2C_MspInit+0x80>)
 8005ae4:	f043 0302 	orr.w	r3, r3, #2
 8005ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005aea:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <HAL_I2C_MspInit+0x80>)
 8005aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005af6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005afc:	2312      	movs	r3, #18
 8005afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b00:	2301      	movs	r3, #1
 8005b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b04:	2303      	movs	r3, #3
 8005b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005b08:	2304      	movs	r3, #4
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	4619      	mov	r1, r3
 8005b12:	480b      	ldr	r0, [pc, #44]	; (8005b40 <HAL_I2C_MspInit+0x84>)
 8005b14:	f7fb f97a 	bl	8000e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005b18:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <HAL_I2C_MspInit+0x80>)
 8005b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1c:	4a07      	ldr	r2, [pc, #28]	; (8005b3c <HAL_I2C_MspInit+0x80>)
 8005b1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b22:	6593      	str	r3, [r2, #88]	; 0x58
 8005b24:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <HAL_I2C_MspInit+0x80>)
 8005b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005b30:	bf00      	nop
 8005b32:	3728      	adds	r7, #40	; 0x28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40005800 	.word	0x40005800
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	48000400 	.word	0x48000400

08005b44 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	; 0x28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b4c:	f107 0314 	add.w	r3, r7, #20
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	60da      	str	r2, [r3, #12]
 8005b5a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <HAL_QSPI_MspInit+0x7c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d128      	bne.n	8005bb8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005b66:	4b17      	ldr	r3, [pc, #92]	; (8005bc4 <HAL_QSPI_MspInit+0x80>)
 8005b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6a:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <HAL_QSPI_MspInit+0x80>)
 8005b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b70:	6513      	str	r3, [r2, #80]	; 0x50
 8005b72:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <HAL_QSPI_MspInit+0x80>)
 8005b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <HAL_QSPI_MspInit+0x80>)
 8005b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b82:	4a10      	ldr	r2, [pc, #64]	; (8005bc4 <HAL_QSPI_MspInit+0x80>)
 8005b84:	f043 0310 	orr.w	r3, r3, #16
 8005b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b8a:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <HAL_QSPI_MspInit+0x80>)
 8005b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8005b96:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8005b9a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005ba8:	230a      	movs	r3, #10
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005bac:	f107 0314 	add.w	r3, r7, #20
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4805      	ldr	r0, [pc, #20]	; (8005bc8 <HAL_QSPI_MspInit+0x84>)
 8005bb4:	f7fb f92a 	bl	8000e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8005bb8:	bf00      	nop
 8005bba:	3728      	adds	r7, #40	; 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	a0001000 	.word	0xa0001000
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	48001000 	.word	0x48001000

08005bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bdc:	d113      	bne.n	8005c06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005bde:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <HAL_TIM_Base_MspInit+0x44>)
 8005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be2:	4a0b      	ldr	r2, [pc, #44]	; (8005c10 <HAL_TIM_Base_MspInit+0x44>)
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6593      	str	r3, [r2, #88]	; 0x58
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_TIM_Base_MspInit+0x44>)
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	201c      	movs	r0, #28
 8005bfc:	f7fa fdca 	bl	8000794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005c00:	201c      	movs	r0, #28
 8005c02:	f7fa fde3 	bl	80007cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40021000 	.word	0x40021000

08005c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c1c:	f107 0314 	add.w	r3, r7, #20
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a17      	ldr	r2, [pc, #92]	; (8005c90 <HAL_UART_MspInit+0x7c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d127      	bne.n	8005c86 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c36:	4b17      	ldr	r3, [pc, #92]	; (8005c94 <HAL_UART_MspInit+0x80>)
 8005c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3a:	4a16      	ldr	r2, [pc, #88]	; (8005c94 <HAL_UART_MspInit+0x80>)
 8005c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c40:	6613      	str	r3, [r2, #96]	; 0x60
 8005c42:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <HAL_UART_MspInit+0x80>)
 8005c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c4e:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <HAL_UART_MspInit+0x80>)
 8005c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c52:	4a10      	ldr	r2, [pc, #64]	; (8005c94 <HAL_UART_MspInit+0x80>)
 8005c54:	f043 0302 	orr.w	r3, r3, #2
 8005c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c5a:	4b0e      	ldr	r3, [pc, #56]	; (8005c94 <HAL_UART_MspInit+0x80>)
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c66:	23c0      	movs	r3, #192	; 0xc0
 8005c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c72:	2303      	movs	r3, #3
 8005c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c76:	2307      	movs	r3, #7
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c7a:	f107 0314 	add.w	r3, r7, #20
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4805      	ldr	r0, [pc, #20]	; (8005c98 <HAL_UART_MspInit+0x84>)
 8005c82:	f7fb f8c3 	bl	8000e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005c86:	bf00      	nop
 8005c88:	3728      	adds	r7, #40	; 0x28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40013800 	.word	0x40013800
 8005c94:	40021000 	.word	0x40021000
 8005c98:	48000400 	.word	0x48000400

08005c9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08c      	sub	sp, #48	; 0x30
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005cac:	2200      	movs	r2, #0
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	2036      	movs	r0, #54	; 0x36
 8005cb2:	f7fa fd6f 	bl	8000794 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005cb6:	2036      	movs	r0, #54	; 0x36
 8005cb8:	f7fa fd88 	bl	80007cc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005cbc:	4b1e      	ldr	r3, [pc, #120]	; (8005d38 <HAL_InitTick+0x9c>)
 8005cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc0:	4a1d      	ldr	r2, [pc, #116]	; (8005d38 <HAL_InitTick+0x9c>)
 8005cc2:	f043 0310 	orr.w	r3, r3, #16
 8005cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8005cc8:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_InitTick+0x9c>)
 8005cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cd4:	f107 0210 	add.w	r2, r7, #16
 8005cd8:	f107 0314 	add.w	r3, r7, #20
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fc fa48 	bl	8002174 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005ce4:	f7fc fa1a 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8005ce8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <HAL_InitTick+0xa0>)
 8005cee:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf2:	0c9b      	lsrs	r3, r3, #18
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005cf8:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <HAL_InitTick+0xa4>)
 8005cfa:	4a12      	ldr	r2, [pc, #72]	; (8005d44 <HAL_InitTick+0xa8>)
 8005cfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <HAL_InitTick+0xa4>)
 8005d00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005d06:	4a0e      	ldr	r2, [pc, #56]	; (8005d40 <HAL_InitTick+0xa4>)
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <HAL_InitTick+0xa4>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d12:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <HAL_InitTick+0xa4>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005d18:	4809      	ldr	r0, [pc, #36]	; (8005d40 <HAL_InitTick+0xa4>)
 8005d1a:	f7fc ff6d 	bl	8002bf8 <HAL_TIM_Base_Init>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005d24:	4806      	ldr	r0, [pc, #24]	; (8005d40 <HAL_InitTick+0xa4>)
 8005d26:	f7fc ffbf 	bl	8002ca8 <HAL_TIM_Base_Start_IT>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	e000      	b.n	8005d30 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3730      	adds	r7, #48	; 0x30
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	431bde83 	.word	0x431bde83
 8005d40:	20001364 	.word	0x20001364
 8005d44:	40001000 	.word	0x40001000

08005d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005d4c:	bf00      	nop
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d56:	b480      	push	{r7}
 8005d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d5a:	e7fe      	b.n	8005d5a <HardFault_Handler+0x4>

08005d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d60:	e7fe      	b.n	8005d60 <MemManage_Handler+0x4>

08005d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d62:	b480      	push	{r7}
 8005d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d66:	e7fe      	b.n	8005d66 <BusFault_Handler+0x4>

08005d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d6c:	e7fe      	b.n	8005d6c <UsageFault_Handler+0x4>

08005d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d72:	bf00      	nop
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8005d80:	4802      	ldr	r0, [pc, #8]	; (8005d8c <DMA1_Channel3_IRQHandler+0x10>)
 8005d82:	f7fa ff93 	bl	8000cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005d86:	bf00      	nop
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	2000120c 	.word	0x2000120c

08005d90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005d94:	4802      	ldr	r0, [pc, #8]	; (8005da0 <TIM2_IRQHandler+0x10>)
 8005d96:	f7fc fff7 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005d9a:	bf00      	nop
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	200012d4 	.word	0x200012d4

08005da4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005da8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005dac:	f7fb f9ee 	bl	800118c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005db0:	bf00      	nop
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005db8:	4803      	ldr	r0, [pc, #12]	; (8005dc8 <TIM6_DAC_IRQHandler+0x14>)
 8005dba:	f7fc ffe5 	bl	8002d88 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8005dbe:	4803      	ldr	r0, [pc, #12]	; (8005dcc <TIM6_DAC_IRQHandler+0x18>)
 8005dc0:	f7fa fd34 	bl	800082c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005dc4:	bf00      	nop
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20001364 	.word	0x20001364
 8005dcc:	200011ac 	.word	0x200011ac

08005dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005dd8:	4a14      	ldr	r2, [pc, #80]	; (8005e2c <_sbrk+0x5c>)
 8005dda:	4b15      	ldr	r3, [pc, #84]	; (8005e30 <_sbrk+0x60>)
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005de4:	4b13      	ldr	r3, [pc, #76]	; (8005e34 <_sbrk+0x64>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005dec:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <_sbrk+0x64>)
 8005dee:	4a12      	ldr	r2, [pc, #72]	; (8005e38 <_sbrk+0x68>)
 8005df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005df2:	4b10      	ldr	r3, [pc, #64]	; (8005e34 <_sbrk+0x64>)
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4413      	add	r3, r2
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d207      	bcs.n	8005e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e00:	f000 f87c 	bl	8005efc <__errno>
 8005e04:	4602      	mov	r2, r0
 8005e06:	230c      	movs	r3, #12
 8005e08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0e:	e009      	b.n	8005e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e10:	4b08      	ldr	r3, [pc, #32]	; (8005e34 <_sbrk+0x64>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e16:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <_sbrk+0x64>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	4a05      	ldr	r2, [pc, #20]	; (8005e34 <_sbrk+0x64>)
 8005e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e22:	68fb      	ldr	r3, [r7, #12]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20018000 	.word	0x20018000
 8005e30:	00000400 	.word	0x00000400
 8005e34:	20001198 	.word	0x20001198
 8005e38:	200013b8 	.word	0x200013b8

08005e3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e40:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <SystemInit+0x64>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e46:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <SystemInit+0x64>)
 8005e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005e50:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <SystemInit+0x68>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a13      	ldr	r2, [pc, #76]	; (8005ea4 <SystemInit+0x68>)
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005e5c:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <SystemInit+0x68>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005e62:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <SystemInit+0x68>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a0f      	ldr	r2, [pc, #60]	; (8005ea4 <SystemInit+0x68>)
 8005e68:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005e6c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005e70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005e72:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <SystemInit+0x68>)
 8005e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e78:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <SystemInit+0x68>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a09      	ldr	r2, [pc, #36]	; (8005ea4 <SystemInit+0x68>)
 8005e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <SystemInit+0x68>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e8c:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <SystemInit+0x64>)
 8005e8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e92:	609a      	str	r2, [r3, #8]
#endif
}
 8005e94:	bf00      	nop
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	e000ed00 	.word	0xe000ed00
 8005ea4:	40021000 	.word	0x40021000

08005ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ee0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005eac:	f7ff ffc6 	bl	8005e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005eb0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005eb2:	e003      	b.n	8005ebc <LoopCopyDataInit>

08005eb4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005eb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005eb6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005eb8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005eba:	3104      	adds	r1, #4

08005ebc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005ebc:	480a      	ldr	r0, [pc, #40]	; (8005ee8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <LoopForever+0xe>)
	adds	r2, r0, r1
 8005ec0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005ec2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005ec4:	d3f6      	bcc.n	8005eb4 <CopyDataInit>
	ldr	r2, =_sbss
 8005ec6:	4a0a      	ldr	r2, [pc, #40]	; (8005ef0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005ec8:	e002      	b.n	8005ed0 <LoopFillZerobss>

08005eca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005eca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005ecc:	f842 3b04 	str.w	r3, [r2], #4

08005ed0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005ed0:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <LoopForever+0x16>)
	cmp	r2, r3
 8005ed2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005ed4:	d3f9      	bcc.n	8005eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ed6:	f000 f817 	bl	8005f08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005eda:	f7ff fa69 	bl	80053b0 <main>

08005ede <LoopForever>:

LoopForever:
    b LoopForever
 8005ede:	e7fe      	b.n	8005ede <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005ee0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005ee4:	080068cc 	.word	0x080068cc
	ldr	r0, =_sdata
 8005ee8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005eec:	200001b4 	.word	0x200001b4
	ldr	r2, =_sbss
 8005ef0:	200001b4 	.word	0x200001b4
	ldr	r3, = _ebss
 8005ef4:	200013b4 	.word	0x200013b4

08005ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ef8:	e7fe      	b.n	8005ef8 <ADC1_2_IRQHandler>
	...

08005efc <__errno>:
 8005efc:	4b01      	ldr	r3, [pc, #4]	; (8005f04 <__errno+0x8>)
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000150 	.word	0x20000150

08005f08 <__libc_init_array>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	4e0d      	ldr	r6, [pc, #52]	; (8005f40 <__libc_init_array+0x38>)
 8005f0c:	4c0d      	ldr	r4, [pc, #52]	; (8005f44 <__libc_init_array+0x3c>)
 8005f0e:	1ba4      	subs	r4, r4, r6
 8005f10:	10a4      	asrs	r4, r4, #2
 8005f12:	2500      	movs	r5, #0
 8005f14:	42a5      	cmp	r5, r4
 8005f16:	d109      	bne.n	8005f2c <__libc_init_array+0x24>
 8005f18:	4e0b      	ldr	r6, [pc, #44]	; (8005f48 <__libc_init_array+0x40>)
 8005f1a:	4c0c      	ldr	r4, [pc, #48]	; (8005f4c <__libc_init_array+0x44>)
 8005f1c:	f000 fc3c 	bl	8006798 <_init>
 8005f20:	1ba4      	subs	r4, r4, r6
 8005f22:	10a4      	asrs	r4, r4, #2
 8005f24:	2500      	movs	r5, #0
 8005f26:	42a5      	cmp	r5, r4
 8005f28:	d105      	bne.n	8005f36 <__libc_init_array+0x2e>
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}
 8005f2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f30:	4798      	blx	r3
 8005f32:	3501      	adds	r5, #1
 8005f34:	e7ee      	b.n	8005f14 <__libc_init_array+0xc>
 8005f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f3a:	4798      	blx	r3
 8005f3c:	3501      	adds	r5, #1
 8005f3e:	e7f2      	b.n	8005f26 <__libc_init_array+0x1e>
 8005f40:	080068c4 	.word	0x080068c4
 8005f44:	080068c4 	.word	0x080068c4
 8005f48:	080068c4 	.word	0x080068c4
 8005f4c:	080068c8 	.word	0x080068c8

08005f50 <memcpy>:
 8005f50:	b510      	push	{r4, lr}
 8005f52:	1e43      	subs	r3, r0, #1
 8005f54:	440a      	add	r2, r1
 8005f56:	4291      	cmp	r1, r2
 8005f58:	d100      	bne.n	8005f5c <memcpy+0xc>
 8005f5a:	bd10      	pop	{r4, pc}
 8005f5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f64:	e7f7      	b.n	8005f56 <memcpy+0x6>

08005f66 <memset>:
 8005f66:	4402      	add	r2, r0
 8005f68:	4603      	mov	r3, r0
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d100      	bne.n	8005f70 <memset+0xa>
 8005f6e:	4770      	bx	lr
 8005f70:	f803 1b01 	strb.w	r1, [r3], #1
 8005f74:	e7f9      	b.n	8005f6a <memset+0x4>
	...

08005f78 <sniprintf>:
 8005f78:	b40c      	push	{r2, r3}
 8005f7a:	b530      	push	{r4, r5, lr}
 8005f7c:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <sniprintf+0x64>)
 8005f7e:	1e0c      	subs	r4, r1, #0
 8005f80:	b09d      	sub	sp, #116	; 0x74
 8005f82:	681d      	ldr	r5, [r3, #0]
 8005f84:	da08      	bge.n	8005f98 <sniprintf+0x20>
 8005f86:	238b      	movs	r3, #139	; 0x8b
 8005f88:	602b      	str	r3, [r5, #0]
 8005f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8e:	b01d      	add	sp, #116	; 0x74
 8005f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f94:	b002      	add	sp, #8
 8005f96:	4770      	bx	lr
 8005f98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005fa0:	bf14      	ite	ne
 8005fa2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fa6:	4623      	moveq	r3, r4
 8005fa8:	9304      	str	r3, [sp, #16]
 8005faa:	9307      	str	r3, [sp, #28]
 8005fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fb0:	9002      	str	r0, [sp, #8]
 8005fb2:	9006      	str	r0, [sp, #24]
 8005fb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005fb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fba:	ab21      	add	r3, sp, #132	; 0x84
 8005fbc:	a902      	add	r1, sp, #8
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	f000 f867 	bl	8006094 <_svfiprintf_r>
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	bfbc      	itt	lt
 8005fca:	238b      	movlt	r3, #139	; 0x8b
 8005fcc:	602b      	strlt	r3, [r5, #0]
 8005fce:	2c00      	cmp	r4, #0
 8005fd0:	d0dd      	beq.n	8005f8e <sniprintf+0x16>
 8005fd2:	9b02      	ldr	r3, [sp, #8]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	e7d9      	b.n	8005f8e <sniprintf+0x16>
 8005fda:	bf00      	nop
 8005fdc:	20000150 	.word	0x20000150

08005fe0 <__ssputs_r>:
 8005fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	688e      	ldr	r6, [r1, #8]
 8005fe6:	429e      	cmp	r6, r3
 8005fe8:	4682      	mov	sl, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	4690      	mov	r8, r2
 8005fee:	4699      	mov	r9, r3
 8005ff0:	d837      	bhi.n	8006062 <__ssputs_r+0x82>
 8005ff2:	898a      	ldrh	r2, [r1, #12]
 8005ff4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ff8:	d031      	beq.n	800605e <__ssputs_r+0x7e>
 8005ffa:	6825      	ldr	r5, [r4, #0]
 8005ffc:	6909      	ldr	r1, [r1, #16]
 8005ffe:	1a6f      	subs	r7, r5, r1
 8006000:	6965      	ldr	r5, [r4, #20]
 8006002:	2302      	movs	r3, #2
 8006004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006008:	fb95 f5f3 	sdiv	r5, r5, r3
 800600c:	f109 0301 	add.w	r3, r9, #1
 8006010:	443b      	add	r3, r7
 8006012:	429d      	cmp	r5, r3
 8006014:	bf38      	it	cc
 8006016:	461d      	movcc	r5, r3
 8006018:	0553      	lsls	r3, r2, #21
 800601a:	d530      	bpl.n	800607e <__ssputs_r+0x9e>
 800601c:	4629      	mov	r1, r5
 800601e:	f000 fb21 	bl	8006664 <_malloc_r>
 8006022:	4606      	mov	r6, r0
 8006024:	b950      	cbnz	r0, 800603c <__ssputs_r+0x5c>
 8006026:	230c      	movs	r3, #12
 8006028:	f8ca 3000 	str.w	r3, [sl]
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	f04f 30ff 	mov.w	r0, #4294967295
 8006038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603c:	463a      	mov	r2, r7
 800603e:	6921      	ldr	r1, [r4, #16]
 8006040:	f7ff ff86 	bl	8005f50 <memcpy>
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800604a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604e:	81a3      	strh	r3, [r4, #12]
 8006050:	6126      	str	r6, [r4, #16]
 8006052:	6165      	str	r5, [r4, #20]
 8006054:	443e      	add	r6, r7
 8006056:	1bed      	subs	r5, r5, r7
 8006058:	6026      	str	r6, [r4, #0]
 800605a:	60a5      	str	r5, [r4, #8]
 800605c:	464e      	mov	r6, r9
 800605e:	454e      	cmp	r6, r9
 8006060:	d900      	bls.n	8006064 <__ssputs_r+0x84>
 8006062:	464e      	mov	r6, r9
 8006064:	4632      	mov	r2, r6
 8006066:	4641      	mov	r1, r8
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	f000 fa93 	bl	8006594 <memmove>
 800606e:	68a3      	ldr	r3, [r4, #8]
 8006070:	1b9b      	subs	r3, r3, r6
 8006072:	60a3      	str	r3, [r4, #8]
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	441e      	add	r6, r3
 8006078:	6026      	str	r6, [r4, #0]
 800607a:	2000      	movs	r0, #0
 800607c:	e7dc      	b.n	8006038 <__ssputs_r+0x58>
 800607e:	462a      	mov	r2, r5
 8006080:	f000 fb4a 	bl	8006718 <_realloc_r>
 8006084:	4606      	mov	r6, r0
 8006086:	2800      	cmp	r0, #0
 8006088:	d1e2      	bne.n	8006050 <__ssputs_r+0x70>
 800608a:	6921      	ldr	r1, [r4, #16]
 800608c:	4650      	mov	r0, sl
 800608e:	f000 fa9b 	bl	80065c8 <_free_r>
 8006092:	e7c8      	b.n	8006026 <__ssputs_r+0x46>

08006094 <_svfiprintf_r>:
 8006094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006098:	461d      	mov	r5, r3
 800609a:	898b      	ldrh	r3, [r1, #12]
 800609c:	061f      	lsls	r7, r3, #24
 800609e:	b09d      	sub	sp, #116	; 0x74
 80060a0:	4680      	mov	r8, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	4616      	mov	r6, r2
 80060a6:	d50f      	bpl.n	80060c8 <_svfiprintf_r+0x34>
 80060a8:	690b      	ldr	r3, [r1, #16]
 80060aa:	b96b      	cbnz	r3, 80060c8 <_svfiprintf_r+0x34>
 80060ac:	2140      	movs	r1, #64	; 0x40
 80060ae:	f000 fad9 	bl	8006664 <_malloc_r>
 80060b2:	6020      	str	r0, [r4, #0]
 80060b4:	6120      	str	r0, [r4, #16]
 80060b6:	b928      	cbnz	r0, 80060c4 <_svfiprintf_r+0x30>
 80060b8:	230c      	movs	r3, #12
 80060ba:	f8c8 3000 	str.w	r3, [r8]
 80060be:	f04f 30ff 	mov.w	r0, #4294967295
 80060c2:	e0c8      	b.n	8006256 <_svfiprintf_r+0x1c2>
 80060c4:	2340      	movs	r3, #64	; 0x40
 80060c6:	6163      	str	r3, [r4, #20]
 80060c8:	2300      	movs	r3, #0
 80060ca:	9309      	str	r3, [sp, #36]	; 0x24
 80060cc:	2320      	movs	r3, #32
 80060ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060d2:	2330      	movs	r3, #48	; 0x30
 80060d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d8:	9503      	str	r5, [sp, #12]
 80060da:	f04f 0b01 	mov.w	fp, #1
 80060de:	4637      	mov	r7, r6
 80060e0:	463d      	mov	r5, r7
 80060e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060e6:	b10b      	cbz	r3, 80060ec <_svfiprintf_r+0x58>
 80060e8:	2b25      	cmp	r3, #37	; 0x25
 80060ea:	d13e      	bne.n	800616a <_svfiprintf_r+0xd6>
 80060ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80060f0:	d00b      	beq.n	800610a <_svfiprintf_r+0x76>
 80060f2:	4653      	mov	r3, sl
 80060f4:	4632      	mov	r2, r6
 80060f6:	4621      	mov	r1, r4
 80060f8:	4640      	mov	r0, r8
 80060fa:	f7ff ff71 	bl	8005fe0 <__ssputs_r>
 80060fe:	3001      	adds	r0, #1
 8006100:	f000 80a4 	beq.w	800624c <_svfiprintf_r+0x1b8>
 8006104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006106:	4453      	add	r3, sl
 8006108:	9309      	str	r3, [sp, #36]	; 0x24
 800610a:	783b      	ldrb	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 809d 	beq.w	800624c <_svfiprintf_r+0x1b8>
 8006112:	2300      	movs	r3, #0
 8006114:	f04f 32ff 	mov.w	r2, #4294967295
 8006118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	9307      	str	r3, [sp, #28]
 8006120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006124:	931a      	str	r3, [sp, #104]	; 0x68
 8006126:	462f      	mov	r7, r5
 8006128:	2205      	movs	r2, #5
 800612a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800612e:	4850      	ldr	r0, [pc, #320]	; (8006270 <_svfiprintf_r+0x1dc>)
 8006130:	f7fa f84e 	bl	80001d0 <memchr>
 8006134:	9b04      	ldr	r3, [sp, #16]
 8006136:	b9d0      	cbnz	r0, 800616e <_svfiprintf_r+0xda>
 8006138:	06d9      	lsls	r1, r3, #27
 800613a:	bf44      	itt	mi
 800613c:	2220      	movmi	r2, #32
 800613e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006142:	071a      	lsls	r2, r3, #28
 8006144:	bf44      	itt	mi
 8006146:	222b      	movmi	r2, #43	; 0x2b
 8006148:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800614c:	782a      	ldrb	r2, [r5, #0]
 800614e:	2a2a      	cmp	r2, #42	; 0x2a
 8006150:	d015      	beq.n	800617e <_svfiprintf_r+0xea>
 8006152:	9a07      	ldr	r2, [sp, #28]
 8006154:	462f      	mov	r7, r5
 8006156:	2000      	movs	r0, #0
 8006158:	250a      	movs	r5, #10
 800615a:	4639      	mov	r1, r7
 800615c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006160:	3b30      	subs	r3, #48	; 0x30
 8006162:	2b09      	cmp	r3, #9
 8006164:	d94d      	bls.n	8006202 <_svfiprintf_r+0x16e>
 8006166:	b1b8      	cbz	r0, 8006198 <_svfiprintf_r+0x104>
 8006168:	e00f      	b.n	800618a <_svfiprintf_r+0xf6>
 800616a:	462f      	mov	r7, r5
 800616c:	e7b8      	b.n	80060e0 <_svfiprintf_r+0x4c>
 800616e:	4a40      	ldr	r2, [pc, #256]	; (8006270 <_svfiprintf_r+0x1dc>)
 8006170:	1a80      	subs	r0, r0, r2
 8006172:	fa0b f000 	lsl.w	r0, fp, r0
 8006176:	4318      	orrs	r0, r3
 8006178:	9004      	str	r0, [sp, #16]
 800617a:	463d      	mov	r5, r7
 800617c:	e7d3      	b.n	8006126 <_svfiprintf_r+0x92>
 800617e:	9a03      	ldr	r2, [sp, #12]
 8006180:	1d11      	adds	r1, r2, #4
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	9103      	str	r1, [sp, #12]
 8006186:	2a00      	cmp	r2, #0
 8006188:	db01      	blt.n	800618e <_svfiprintf_r+0xfa>
 800618a:	9207      	str	r2, [sp, #28]
 800618c:	e004      	b.n	8006198 <_svfiprintf_r+0x104>
 800618e:	4252      	negs	r2, r2
 8006190:	f043 0302 	orr.w	r3, r3, #2
 8006194:	9207      	str	r2, [sp, #28]
 8006196:	9304      	str	r3, [sp, #16]
 8006198:	783b      	ldrb	r3, [r7, #0]
 800619a:	2b2e      	cmp	r3, #46	; 0x2e
 800619c:	d10c      	bne.n	80061b8 <_svfiprintf_r+0x124>
 800619e:	787b      	ldrb	r3, [r7, #1]
 80061a0:	2b2a      	cmp	r3, #42	; 0x2a
 80061a2:	d133      	bne.n	800620c <_svfiprintf_r+0x178>
 80061a4:	9b03      	ldr	r3, [sp, #12]
 80061a6:	1d1a      	adds	r2, r3, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	9203      	str	r2, [sp, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bfb8      	it	lt
 80061b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80061b4:	3702      	adds	r7, #2
 80061b6:	9305      	str	r3, [sp, #20]
 80061b8:	4d2e      	ldr	r5, [pc, #184]	; (8006274 <_svfiprintf_r+0x1e0>)
 80061ba:	7839      	ldrb	r1, [r7, #0]
 80061bc:	2203      	movs	r2, #3
 80061be:	4628      	mov	r0, r5
 80061c0:	f7fa f806 	bl	80001d0 <memchr>
 80061c4:	b138      	cbz	r0, 80061d6 <_svfiprintf_r+0x142>
 80061c6:	2340      	movs	r3, #64	; 0x40
 80061c8:	1b40      	subs	r0, r0, r5
 80061ca:	fa03 f000 	lsl.w	r0, r3, r0
 80061ce:	9b04      	ldr	r3, [sp, #16]
 80061d0:	4303      	orrs	r3, r0
 80061d2:	3701      	adds	r7, #1
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	7839      	ldrb	r1, [r7, #0]
 80061d8:	4827      	ldr	r0, [pc, #156]	; (8006278 <_svfiprintf_r+0x1e4>)
 80061da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061de:	2206      	movs	r2, #6
 80061e0:	1c7e      	adds	r6, r7, #1
 80061e2:	f7f9 fff5 	bl	80001d0 <memchr>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d038      	beq.n	800625c <_svfiprintf_r+0x1c8>
 80061ea:	4b24      	ldr	r3, [pc, #144]	; (800627c <_svfiprintf_r+0x1e8>)
 80061ec:	bb13      	cbnz	r3, 8006234 <_svfiprintf_r+0x1a0>
 80061ee:	9b03      	ldr	r3, [sp, #12]
 80061f0:	3307      	adds	r3, #7
 80061f2:	f023 0307 	bic.w	r3, r3, #7
 80061f6:	3308      	adds	r3, #8
 80061f8:	9303      	str	r3, [sp, #12]
 80061fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fc:	444b      	add	r3, r9
 80061fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006200:	e76d      	b.n	80060de <_svfiprintf_r+0x4a>
 8006202:	fb05 3202 	mla	r2, r5, r2, r3
 8006206:	2001      	movs	r0, #1
 8006208:	460f      	mov	r7, r1
 800620a:	e7a6      	b.n	800615a <_svfiprintf_r+0xc6>
 800620c:	2300      	movs	r3, #0
 800620e:	3701      	adds	r7, #1
 8006210:	9305      	str	r3, [sp, #20]
 8006212:	4619      	mov	r1, r3
 8006214:	250a      	movs	r5, #10
 8006216:	4638      	mov	r0, r7
 8006218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621c:	3a30      	subs	r2, #48	; 0x30
 800621e:	2a09      	cmp	r2, #9
 8006220:	d903      	bls.n	800622a <_svfiprintf_r+0x196>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0c8      	beq.n	80061b8 <_svfiprintf_r+0x124>
 8006226:	9105      	str	r1, [sp, #20]
 8006228:	e7c6      	b.n	80061b8 <_svfiprintf_r+0x124>
 800622a:	fb05 2101 	mla	r1, r5, r1, r2
 800622e:	2301      	movs	r3, #1
 8006230:	4607      	mov	r7, r0
 8006232:	e7f0      	b.n	8006216 <_svfiprintf_r+0x182>
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	4622      	mov	r2, r4
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <_svfiprintf_r+0x1ec>)
 800623c:	a904      	add	r1, sp, #16
 800623e:	4640      	mov	r0, r8
 8006240:	f3af 8000 	nop.w
 8006244:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006248:	4681      	mov	r9, r0
 800624a:	d1d6      	bne.n	80061fa <_svfiprintf_r+0x166>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	065b      	lsls	r3, r3, #25
 8006250:	f53f af35 	bmi.w	80060be <_svfiprintf_r+0x2a>
 8006254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006256:	b01d      	add	sp, #116	; 0x74
 8006258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625c:	ab03      	add	r3, sp, #12
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	4622      	mov	r2, r4
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <_svfiprintf_r+0x1ec>)
 8006264:	a904      	add	r1, sp, #16
 8006266:	4640      	mov	r0, r8
 8006268:	f000 f882 	bl	8006370 <_printf_i>
 800626c:	e7ea      	b.n	8006244 <_svfiprintf_r+0x1b0>
 800626e:	bf00      	nop
 8006270:	08006888 	.word	0x08006888
 8006274:	0800688e 	.word	0x0800688e
 8006278:	08006892 	.word	0x08006892
 800627c:	00000000 	.word	0x00000000
 8006280:	08005fe1 	.word	0x08005fe1

08006284 <_printf_common>:
 8006284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	4691      	mov	r9, r2
 800628a:	461f      	mov	r7, r3
 800628c:	688a      	ldr	r2, [r1, #8]
 800628e:	690b      	ldr	r3, [r1, #16]
 8006290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006294:	4293      	cmp	r3, r2
 8006296:	bfb8      	it	lt
 8006298:	4613      	movlt	r3, r2
 800629a:	f8c9 3000 	str.w	r3, [r9]
 800629e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a2:	4606      	mov	r6, r0
 80062a4:	460c      	mov	r4, r1
 80062a6:	b112      	cbz	r2, 80062ae <_printf_common+0x2a>
 80062a8:	3301      	adds	r3, #1
 80062aa:	f8c9 3000 	str.w	r3, [r9]
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	0699      	lsls	r1, r3, #26
 80062b2:	bf42      	ittt	mi
 80062b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80062b8:	3302      	addmi	r3, #2
 80062ba:	f8c9 3000 	strmi.w	r3, [r9]
 80062be:	6825      	ldr	r5, [r4, #0]
 80062c0:	f015 0506 	ands.w	r5, r5, #6
 80062c4:	d107      	bne.n	80062d6 <_printf_common+0x52>
 80062c6:	f104 0a19 	add.w	sl, r4, #25
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	f8d9 2000 	ldr.w	r2, [r9]
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	42ab      	cmp	r3, r5
 80062d4:	dc28      	bgt.n	8006328 <_printf_common+0xa4>
 80062d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80062da:	6822      	ldr	r2, [r4, #0]
 80062dc:	3300      	adds	r3, #0
 80062de:	bf18      	it	ne
 80062e0:	2301      	movne	r3, #1
 80062e2:	0692      	lsls	r2, r2, #26
 80062e4:	d42d      	bmi.n	8006342 <_printf_common+0xbe>
 80062e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062ea:	4639      	mov	r1, r7
 80062ec:	4630      	mov	r0, r6
 80062ee:	47c0      	blx	r8
 80062f0:	3001      	adds	r0, #1
 80062f2:	d020      	beq.n	8006336 <_printf_common+0xb2>
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	68e5      	ldr	r5, [r4, #12]
 80062f8:	f8d9 2000 	ldr.w	r2, [r9]
 80062fc:	f003 0306 	and.w	r3, r3, #6
 8006300:	2b04      	cmp	r3, #4
 8006302:	bf08      	it	eq
 8006304:	1aad      	subeq	r5, r5, r2
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	6922      	ldr	r2, [r4, #16]
 800630a:	bf0c      	ite	eq
 800630c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006310:	2500      	movne	r5, #0
 8006312:	4293      	cmp	r3, r2
 8006314:	bfc4      	itt	gt
 8006316:	1a9b      	subgt	r3, r3, r2
 8006318:	18ed      	addgt	r5, r5, r3
 800631a:	f04f 0900 	mov.w	r9, #0
 800631e:	341a      	adds	r4, #26
 8006320:	454d      	cmp	r5, r9
 8006322:	d11a      	bne.n	800635a <_printf_common+0xd6>
 8006324:	2000      	movs	r0, #0
 8006326:	e008      	b.n	800633a <_printf_common+0xb6>
 8006328:	2301      	movs	r3, #1
 800632a:	4652      	mov	r2, sl
 800632c:	4639      	mov	r1, r7
 800632e:	4630      	mov	r0, r6
 8006330:	47c0      	blx	r8
 8006332:	3001      	adds	r0, #1
 8006334:	d103      	bne.n	800633e <_printf_common+0xba>
 8006336:	f04f 30ff 	mov.w	r0, #4294967295
 800633a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633e:	3501      	adds	r5, #1
 8006340:	e7c3      	b.n	80062ca <_printf_common+0x46>
 8006342:	18e1      	adds	r1, r4, r3
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	2030      	movs	r0, #48	; 0x30
 8006348:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800634c:	4422      	add	r2, r4
 800634e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006352:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006356:	3302      	adds	r3, #2
 8006358:	e7c5      	b.n	80062e6 <_printf_common+0x62>
 800635a:	2301      	movs	r3, #1
 800635c:	4622      	mov	r2, r4
 800635e:	4639      	mov	r1, r7
 8006360:	4630      	mov	r0, r6
 8006362:	47c0      	blx	r8
 8006364:	3001      	adds	r0, #1
 8006366:	d0e6      	beq.n	8006336 <_printf_common+0xb2>
 8006368:	f109 0901 	add.w	r9, r9, #1
 800636c:	e7d8      	b.n	8006320 <_printf_common+0x9c>
	...

08006370 <_printf_i>:
 8006370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006374:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006378:	460c      	mov	r4, r1
 800637a:	7e09      	ldrb	r1, [r1, #24]
 800637c:	b085      	sub	sp, #20
 800637e:	296e      	cmp	r1, #110	; 0x6e
 8006380:	4617      	mov	r7, r2
 8006382:	4606      	mov	r6, r0
 8006384:	4698      	mov	r8, r3
 8006386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006388:	f000 80b3 	beq.w	80064f2 <_printf_i+0x182>
 800638c:	d822      	bhi.n	80063d4 <_printf_i+0x64>
 800638e:	2963      	cmp	r1, #99	; 0x63
 8006390:	d036      	beq.n	8006400 <_printf_i+0x90>
 8006392:	d80a      	bhi.n	80063aa <_printf_i+0x3a>
 8006394:	2900      	cmp	r1, #0
 8006396:	f000 80b9 	beq.w	800650c <_printf_i+0x19c>
 800639a:	2958      	cmp	r1, #88	; 0x58
 800639c:	f000 8083 	beq.w	80064a6 <_printf_i+0x136>
 80063a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80063a8:	e032      	b.n	8006410 <_printf_i+0xa0>
 80063aa:	2964      	cmp	r1, #100	; 0x64
 80063ac:	d001      	beq.n	80063b2 <_printf_i+0x42>
 80063ae:	2969      	cmp	r1, #105	; 0x69
 80063b0:	d1f6      	bne.n	80063a0 <_printf_i+0x30>
 80063b2:	6820      	ldr	r0, [r4, #0]
 80063b4:	6813      	ldr	r3, [r2, #0]
 80063b6:	0605      	lsls	r5, r0, #24
 80063b8:	f103 0104 	add.w	r1, r3, #4
 80063bc:	d52a      	bpl.n	8006414 <_printf_i+0xa4>
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6011      	str	r1, [r2, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	da03      	bge.n	80063ce <_printf_i+0x5e>
 80063c6:	222d      	movs	r2, #45	; 0x2d
 80063c8:	425b      	negs	r3, r3
 80063ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063ce:	486f      	ldr	r0, [pc, #444]	; (800658c <_printf_i+0x21c>)
 80063d0:	220a      	movs	r2, #10
 80063d2:	e039      	b.n	8006448 <_printf_i+0xd8>
 80063d4:	2973      	cmp	r1, #115	; 0x73
 80063d6:	f000 809d 	beq.w	8006514 <_printf_i+0x1a4>
 80063da:	d808      	bhi.n	80063ee <_printf_i+0x7e>
 80063dc:	296f      	cmp	r1, #111	; 0x6f
 80063de:	d020      	beq.n	8006422 <_printf_i+0xb2>
 80063e0:	2970      	cmp	r1, #112	; 0x70
 80063e2:	d1dd      	bne.n	80063a0 <_printf_i+0x30>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	f043 0320 	orr.w	r3, r3, #32
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	e003      	b.n	80063f6 <_printf_i+0x86>
 80063ee:	2975      	cmp	r1, #117	; 0x75
 80063f0:	d017      	beq.n	8006422 <_printf_i+0xb2>
 80063f2:	2978      	cmp	r1, #120	; 0x78
 80063f4:	d1d4      	bne.n	80063a0 <_printf_i+0x30>
 80063f6:	2378      	movs	r3, #120	; 0x78
 80063f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063fc:	4864      	ldr	r0, [pc, #400]	; (8006590 <_printf_i+0x220>)
 80063fe:	e055      	b.n	80064ac <_printf_i+0x13c>
 8006400:	6813      	ldr	r3, [r2, #0]
 8006402:	1d19      	adds	r1, r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6011      	str	r1, [r2, #0]
 8006408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800640c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006410:	2301      	movs	r3, #1
 8006412:	e08c      	b.n	800652e <_printf_i+0x1be>
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6011      	str	r1, [r2, #0]
 8006418:	f010 0f40 	tst.w	r0, #64	; 0x40
 800641c:	bf18      	it	ne
 800641e:	b21b      	sxthne	r3, r3
 8006420:	e7cf      	b.n	80063c2 <_printf_i+0x52>
 8006422:	6813      	ldr	r3, [r2, #0]
 8006424:	6825      	ldr	r5, [r4, #0]
 8006426:	1d18      	adds	r0, r3, #4
 8006428:	6010      	str	r0, [r2, #0]
 800642a:	0628      	lsls	r0, r5, #24
 800642c:	d501      	bpl.n	8006432 <_printf_i+0xc2>
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	e002      	b.n	8006438 <_printf_i+0xc8>
 8006432:	0668      	lsls	r0, r5, #25
 8006434:	d5fb      	bpl.n	800642e <_printf_i+0xbe>
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	4854      	ldr	r0, [pc, #336]	; (800658c <_printf_i+0x21c>)
 800643a:	296f      	cmp	r1, #111	; 0x6f
 800643c:	bf14      	ite	ne
 800643e:	220a      	movne	r2, #10
 8006440:	2208      	moveq	r2, #8
 8006442:	2100      	movs	r1, #0
 8006444:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006448:	6865      	ldr	r5, [r4, #4]
 800644a:	60a5      	str	r5, [r4, #8]
 800644c:	2d00      	cmp	r5, #0
 800644e:	f2c0 8095 	blt.w	800657c <_printf_i+0x20c>
 8006452:	6821      	ldr	r1, [r4, #0]
 8006454:	f021 0104 	bic.w	r1, r1, #4
 8006458:	6021      	str	r1, [r4, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d13d      	bne.n	80064da <_printf_i+0x16a>
 800645e:	2d00      	cmp	r5, #0
 8006460:	f040 808e 	bne.w	8006580 <_printf_i+0x210>
 8006464:	4665      	mov	r5, ip
 8006466:	2a08      	cmp	r2, #8
 8006468:	d10b      	bne.n	8006482 <_printf_i+0x112>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	07db      	lsls	r3, r3, #31
 800646e:	d508      	bpl.n	8006482 <_printf_i+0x112>
 8006470:	6923      	ldr	r3, [r4, #16]
 8006472:	6862      	ldr	r2, [r4, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	bfde      	ittt	le
 8006478:	2330      	movle	r3, #48	; 0x30
 800647a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800647e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006482:	ebac 0305 	sub.w	r3, ip, r5
 8006486:	6123      	str	r3, [r4, #16]
 8006488:	f8cd 8000 	str.w	r8, [sp]
 800648c:	463b      	mov	r3, r7
 800648e:	aa03      	add	r2, sp, #12
 8006490:	4621      	mov	r1, r4
 8006492:	4630      	mov	r0, r6
 8006494:	f7ff fef6 	bl	8006284 <_printf_common>
 8006498:	3001      	adds	r0, #1
 800649a:	d14d      	bne.n	8006538 <_printf_i+0x1c8>
 800649c:	f04f 30ff 	mov.w	r0, #4294967295
 80064a0:	b005      	add	sp, #20
 80064a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064a6:	4839      	ldr	r0, [pc, #228]	; (800658c <_printf_i+0x21c>)
 80064a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80064ac:	6813      	ldr	r3, [r2, #0]
 80064ae:	6821      	ldr	r1, [r4, #0]
 80064b0:	1d1d      	adds	r5, r3, #4
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6015      	str	r5, [r2, #0]
 80064b6:	060a      	lsls	r2, r1, #24
 80064b8:	d50b      	bpl.n	80064d2 <_printf_i+0x162>
 80064ba:	07ca      	lsls	r2, r1, #31
 80064bc:	bf44      	itt	mi
 80064be:	f041 0120 	orrmi.w	r1, r1, #32
 80064c2:	6021      	strmi	r1, [r4, #0]
 80064c4:	b91b      	cbnz	r3, 80064ce <_printf_i+0x15e>
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	f022 0220 	bic.w	r2, r2, #32
 80064cc:	6022      	str	r2, [r4, #0]
 80064ce:	2210      	movs	r2, #16
 80064d0:	e7b7      	b.n	8006442 <_printf_i+0xd2>
 80064d2:	064d      	lsls	r5, r1, #25
 80064d4:	bf48      	it	mi
 80064d6:	b29b      	uxthmi	r3, r3
 80064d8:	e7ef      	b.n	80064ba <_printf_i+0x14a>
 80064da:	4665      	mov	r5, ip
 80064dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80064e0:	fb02 3311 	mls	r3, r2, r1, r3
 80064e4:	5cc3      	ldrb	r3, [r0, r3]
 80064e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064ea:	460b      	mov	r3, r1
 80064ec:	2900      	cmp	r1, #0
 80064ee:	d1f5      	bne.n	80064dc <_printf_i+0x16c>
 80064f0:	e7b9      	b.n	8006466 <_printf_i+0xf6>
 80064f2:	6813      	ldr	r3, [r2, #0]
 80064f4:	6825      	ldr	r5, [r4, #0]
 80064f6:	6961      	ldr	r1, [r4, #20]
 80064f8:	1d18      	adds	r0, r3, #4
 80064fa:	6010      	str	r0, [r2, #0]
 80064fc:	0628      	lsls	r0, r5, #24
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	d501      	bpl.n	8006506 <_printf_i+0x196>
 8006502:	6019      	str	r1, [r3, #0]
 8006504:	e002      	b.n	800650c <_printf_i+0x19c>
 8006506:	066a      	lsls	r2, r5, #25
 8006508:	d5fb      	bpl.n	8006502 <_printf_i+0x192>
 800650a:	8019      	strh	r1, [r3, #0]
 800650c:	2300      	movs	r3, #0
 800650e:	6123      	str	r3, [r4, #16]
 8006510:	4665      	mov	r5, ip
 8006512:	e7b9      	b.n	8006488 <_printf_i+0x118>
 8006514:	6813      	ldr	r3, [r2, #0]
 8006516:	1d19      	adds	r1, r3, #4
 8006518:	6011      	str	r1, [r2, #0]
 800651a:	681d      	ldr	r5, [r3, #0]
 800651c:	6862      	ldr	r2, [r4, #4]
 800651e:	2100      	movs	r1, #0
 8006520:	4628      	mov	r0, r5
 8006522:	f7f9 fe55 	bl	80001d0 <memchr>
 8006526:	b108      	cbz	r0, 800652c <_printf_i+0x1bc>
 8006528:	1b40      	subs	r0, r0, r5
 800652a:	6060      	str	r0, [r4, #4]
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	2300      	movs	r3, #0
 8006532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006536:	e7a7      	b.n	8006488 <_printf_i+0x118>
 8006538:	6923      	ldr	r3, [r4, #16]
 800653a:	462a      	mov	r2, r5
 800653c:	4639      	mov	r1, r7
 800653e:	4630      	mov	r0, r6
 8006540:	47c0      	blx	r8
 8006542:	3001      	adds	r0, #1
 8006544:	d0aa      	beq.n	800649c <_printf_i+0x12c>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	079b      	lsls	r3, r3, #30
 800654a:	d413      	bmi.n	8006574 <_printf_i+0x204>
 800654c:	68e0      	ldr	r0, [r4, #12]
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	4298      	cmp	r0, r3
 8006552:	bfb8      	it	lt
 8006554:	4618      	movlt	r0, r3
 8006556:	e7a3      	b.n	80064a0 <_printf_i+0x130>
 8006558:	2301      	movs	r3, #1
 800655a:	464a      	mov	r2, r9
 800655c:	4639      	mov	r1, r7
 800655e:	4630      	mov	r0, r6
 8006560:	47c0      	blx	r8
 8006562:	3001      	adds	r0, #1
 8006564:	d09a      	beq.n	800649c <_printf_i+0x12c>
 8006566:	3501      	adds	r5, #1
 8006568:	68e3      	ldr	r3, [r4, #12]
 800656a:	9a03      	ldr	r2, [sp, #12]
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	42ab      	cmp	r3, r5
 8006570:	dcf2      	bgt.n	8006558 <_printf_i+0x1e8>
 8006572:	e7eb      	b.n	800654c <_printf_i+0x1dc>
 8006574:	2500      	movs	r5, #0
 8006576:	f104 0919 	add.w	r9, r4, #25
 800657a:	e7f5      	b.n	8006568 <_printf_i+0x1f8>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1ac      	bne.n	80064da <_printf_i+0x16a>
 8006580:	7803      	ldrb	r3, [r0, #0]
 8006582:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006586:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800658a:	e76c      	b.n	8006466 <_printf_i+0xf6>
 800658c:	08006899 	.word	0x08006899
 8006590:	080068aa 	.word	0x080068aa

08006594 <memmove>:
 8006594:	4288      	cmp	r0, r1
 8006596:	b510      	push	{r4, lr}
 8006598:	eb01 0302 	add.w	r3, r1, r2
 800659c:	d807      	bhi.n	80065ae <memmove+0x1a>
 800659e:	1e42      	subs	r2, r0, #1
 80065a0:	4299      	cmp	r1, r3
 80065a2:	d00a      	beq.n	80065ba <memmove+0x26>
 80065a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80065ac:	e7f8      	b.n	80065a0 <memmove+0xc>
 80065ae:	4283      	cmp	r3, r0
 80065b0:	d9f5      	bls.n	800659e <memmove+0xa>
 80065b2:	1881      	adds	r1, r0, r2
 80065b4:	1ad2      	subs	r2, r2, r3
 80065b6:	42d3      	cmn	r3, r2
 80065b8:	d100      	bne.n	80065bc <memmove+0x28>
 80065ba:	bd10      	pop	{r4, pc}
 80065bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80065c4:	e7f7      	b.n	80065b6 <memmove+0x22>
	...

080065c8 <_free_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4605      	mov	r5, r0
 80065cc:	2900      	cmp	r1, #0
 80065ce:	d045      	beq.n	800665c <_free_r+0x94>
 80065d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d4:	1f0c      	subs	r4, r1, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	bfb8      	it	lt
 80065da:	18e4      	addlt	r4, r4, r3
 80065dc:	f000 f8d2 	bl	8006784 <__malloc_lock>
 80065e0:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <_free_r+0x98>)
 80065e2:	6813      	ldr	r3, [r2, #0]
 80065e4:	4610      	mov	r0, r2
 80065e6:	b933      	cbnz	r3, 80065f6 <_free_r+0x2e>
 80065e8:	6063      	str	r3, [r4, #4]
 80065ea:	6014      	str	r4, [r2, #0]
 80065ec:	4628      	mov	r0, r5
 80065ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065f2:	f000 b8c8 	b.w	8006786 <__malloc_unlock>
 80065f6:	42a3      	cmp	r3, r4
 80065f8:	d90c      	bls.n	8006614 <_free_r+0x4c>
 80065fa:	6821      	ldr	r1, [r4, #0]
 80065fc:	1862      	adds	r2, r4, r1
 80065fe:	4293      	cmp	r3, r2
 8006600:	bf04      	itt	eq
 8006602:	681a      	ldreq	r2, [r3, #0]
 8006604:	685b      	ldreq	r3, [r3, #4]
 8006606:	6063      	str	r3, [r4, #4]
 8006608:	bf04      	itt	eq
 800660a:	1852      	addeq	r2, r2, r1
 800660c:	6022      	streq	r2, [r4, #0]
 800660e:	6004      	str	r4, [r0, #0]
 8006610:	e7ec      	b.n	80065ec <_free_r+0x24>
 8006612:	4613      	mov	r3, r2
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	b10a      	cbz	r2, 800661c <_free_r+0x54>
 8006618:	42a2      	cmp	r2, r4
 800661a:	d9fa      	bls.n	8006612 <_free_r+0x4a>
 800661c:	6819      	ldr	r1, [r3, #0]
 800661e:	1858      	adds	r0, r3, r1
 8006620:	42a0      	cmp	r0, r4
 8006622:	d10b      	bne.n	800663c <_free_r+0x74>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	4401      	add	r1, r0
 8006628:	1858      	adds	r0, r3, r1
 800662a:	4282      	cmp	r2, r0
 800662c:	6019      	str	r1, [r3, #0]
 800662e:	d1dd      	bne.n	80065ec <_free_r+0x24>
 8006630:	6810      	ldr	r0, [r2, #0]
 8006632:	6852      	ldr	r2, [r2, #4]
 8006634:	605a      	str	r2, [r3, #4]
 8006636:	4401      	add	r1, r0
 8006638:	6019      	str	r1, [r3, #0]
 800663a:	e7d7      	b.n	80065ec <_free_r+0x24>
 800663c:	d902      	bls.n	8006644 <_free_r+0x7c>
 800663e:	230c      	movs	r3, #12
 8006640:	602b      	str	r3, [r5, #0]
 8006642:	e7d3      	b.n	80065ec <_free_r+0x24>
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	1821      	adds	r1, r4, r0
 8006648:	428a      	cmp	r2, r1
 800664a:	bf04      	itt	eq
 800664c:	6811      	ldreq	r1, [r2, #0]
 800664e:	6852      	ldreq	r2, [r2, #4]
 8006650:	6062      	str	r2, [r4, #4]
 8006652:	bf04      	itt	eq
 8006654:	1809      	addeq	r1, r1, r0
 8006656:	6021      	streq	r1, [r4, #0]
 8006658:	605c      	str	r4, [r3, #4]
 800665a:	e7c7      	b.n	80065ec <_free_r+0x24>
 800665c:	bd38      	pop	{r3, r4, r5, pc}
 800665e:	bf00      	nop
 8006660:	2000119c 	.word	0x2000119c

08006664 <_malloc_r>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	1ccd      	adds	r5, r1, #3
 8006668:	f025 0503 	bic.w	r5, r5, #3
 800666c:	3508      	adds	r5, #8
 800666e:	2d0c      	cmp	r5, #12
 8006670:	bf38      	it	cc
 8006672:	250c      	movcc	r5, #12
 8006674:	2d00      	cmp	r5, #0
 8006676:	4606      	mov	r6, r0
 8006678:	db01      	blt.n	800667e <_malloc_r+0x1a>
 800667a:	42a9      	cmp	r1, r5
 800667c:	d903      	bls.n	8006686 <_malloc_r+0x22>
 800667e:	230c      	movs	r3, #12
 8006680:	6033      	str	r3, [r6, #0]
 8006682:	2000      	movs	r0, #0
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	f000 f87d 	bl	8006784 <__malloc_lock>
 800668a:	4a21      	ldr	r2, [pc, #132]	; (8006710 <_malloc_r+0xac>)
 800668c:	6814      	ldr	r4, [r2, #0]
 800668e:	4621      	mov	r1, r4
 8006690:	b991      	cbnz	r1, 80066b8 <_malloc_r+0x54>
 8006692:	4c20      	ldr	r4, [pc, #128]	; (8006714 <_malloc_r+0xb0>)
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	b91b      	cbnz	r3, 80066a0 <_malloc_r+0x3c>
 8006698:	4630      	mov	r0, r6
 800669a:	f000 f863 	bl	8006764 <_sbrk_r>
 800669e:	6020      	str	r0, [r4, #0]
 80066a0:	4629      	mov	r1, r5
 80066a2:	4630      	mov	r0, r6
 80066a4:	f000 f85e 	bl	8006764 <_sbrk_r>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d124      	bne.n	80066f6 <_malloc_r+0x92>
 80066ac:	230c      	movs	r3, #12
 80066ae:	6033      	str	r3, [r6, #0]
 80066b0:	4630      	mov	r0, r6
 80066b2:	f000 f868 	bl	8006786 <__malloc_unlock>
 80066b6:	e7e4      	b.n	8006682 <_malloc_r+0x1e>
 80066b8:	680b      	ldr	r3, [r1, #0]
 80066ba:	1b5b      	subs	r3, r3, r5
 80066bc:	d418      	bmi.n	80066f0 <_malloc_r+0x8c>
 80066be:	2b0b      	cmp	r3, #11
 80066c0:	d90f      	bls.n	80066e2 <_malloc_r+0x7e>
 80066c2:	600b      	str	r3, [r1, #0]
 80066c4:	50cd      	str	r5, [r1, r3]
 80066c6:	18cc      	adds	r4, r1, r3
 80066c8:	4630      	mov	r0, r6
 80066ca:	f000 f85c 	bl	8006786 <__malloc_unlock>
 80066ce:	f104 000b 	add.w	r0, r4, #11
 80066d2:	1d23      	adds	r3, r4, #4
 80066d4:	f020 0007 	bic.w	r0, r0, #7
 80066d8:	1ac3      	subs	r3, r0, r3
 80066da:	d0d3      	beq.n	8006684 <_malloc_r+0x20>
 80066dc:	425a      	negs	r2, r3
 80066de:	50e2      	str	r2, [r4, r3]
 80066e0:	e7d0      	b.n	8006684 <_malloc_r+0x20>
 80066e2:	428c      	cmp	r4, r1
 80066e4:	684b      	ldr	r3, [r1, #4]
 80066e6:	bf16      	itet	ne
 80066e8:	6063      	strne	r3, [r4, #4]
 80066ea:	6013      	streq	r3, [r2, #0]
 80066ec:	460c      	movne	r4, r1
 80066ee:	e7eb      	b.n	80066c8 <_malloc_r+0x64>
 80066f0:	460c      	mov	r4, r1
 80066f2:	6849      	ldr	r1, [r1, #4]
 80066f4:	e7cc      	b.n	8006690 <_malloc_r+0x2c>
 80066f6:	1cc4      	adds	r4, r0, #3
 80066f8:	f024 0403 	bic.w	r4, r4, #3
 80066fc:	42a0      	cmp	r0, r4
 80066fe:	d005      	beq.n	800670c <_malloc_r+0xa8>
 8006700:	1a21      	subs	r1, r4, r0
 8006702:	4630      	mov	r0, r6
 8006704:	f000 f82e 	bl	8006764 <_sbrk_r>
 8006708:	3001      	adds	r0, #1
 800670a:	d0cf      	beq.n	80066ac <_malloc_r+0x48>
 800670c:	6025      	str	r5, [r4, #0]
 800670e:	e7db      	b.n	80066c8 <_malloc_r+0x64>
 8006710:	2000119c 	.word	0x2000119c
 8006714:	200011a0 	.word	0x200011a0

08006718 <_realloc_r>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	4607      	mov	r7, r0
 800671c:	4614      	mov	r4, r2
 800671e:	460e      	mov	r6, r1
 8006720:	b921      	cbnz	r1, 800672c <_realloc_r+0x14>
 8006722:	4611      	mov	r1, r2
 8006724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006728:	f7ff bf9c 	b.w	8006664 <_malloc_r>
 800672c:	b922      	cbnz	r2, 8006738 <_realloc_r+0x20>
 800672e:	f7ff ff4b 	bl	80065c8 <_free_r>
 8006732:	4625      	mov	r5, r4
 8006734:	4628      	mov	r0, r5
 8006736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006738:	f000 f826 	bl	8006788 <_malloc_usable_size_r>
 800673c:	42a0      	cmp	r0, r4
 800673e:	d20f      	bcs.n	8006760 <_realloc_r+0x48>
 8006740:	4621      	mov	r1, r4
 8006742:	4638      	mov	r0, r7
 8006744:	f7ff ff8e 	bl	8006664 <_malloc_r>
 8006748:	4605      	mov	r5, r0
 800674a:	2800      	cmp	r0, #0
 800674c:	d0f2      	beq.n	8006734 <_realloc_r+0x1c>
 800674e:	4631      	mov	r1, r6
 8006750:	4622      	mov	r2, r4
 8006752:	f7ff fbfd 	bl	8005f50 <memcpy>
 8006756:	4631      	mov	r1, r6
 8006758:	4638      	mov	r0, r7
 800675a:	f7ff ff35 	bl	80065c8 <_free_r>
 800675e:	e7e9      	b.n	8006734 <_realloc_r+0x1c>
 8006760:	4635      	mov	r5, r6
 8006762:	e7e7      	b.n	8006734 <_realloc_r+0x1c>

08006764 <_sbrk_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4c06      	ldr	r4, [pc, #24]	; (8006780 <_sbrk_r+0x1c>)
 8006768:	2300      	movs	r3, #0
 800676a:	4605      	mov	r5, r0
 800676c:	4608      	mov	r0, r1
 800676e:	6023      	str	r3, [r4, #0]
 8006770:	f7ff fb2e 	bl	8005dd0 <_sbrk>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_sbrk_r+0x1a>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	b103      	cbz	r3, 800677e <_sbrk_r+0x1a>
 800677c:	602b      	str	r3, [r5, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	200013b0 	.word	0x200013b0

08006784 <__malloc_lock>:
 8006784:	4770      	bx	lr

08006786 <__malloc_unlock>:
 8006786:	4770      	bx	lr

08006788 <_malloc_usable_size_r>:
 8006788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800678c:	1f18      	subs	r0, r3, #4
 800678e:	2b00      	cmp	r3, #0
 8006790:	bfbc      	itt	lt
 8006792:	580b      	ldrlt	r3, [r1, r0]
 8006794:	18c0      	addlt	r0, r0, r3
 8006796:	4770      	bx	lr

08006798 <_init>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr

080067a4 <_fini>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr
